window.store = {"index.html": {"url": "index.html", "title": "Overview", "content": " IPP Overview Get Ready Understanding users Use cases, usability, goals and principles Frameworks Reflections First sketch From LoFi to HiFi Style a prototype Improving interactions Paper prototyping HiFi Prototyping LoFi Web App HiFi Web App Thinking Aloud Heuristic Analysis Qualitative Evaluation Quantitative Evaluation M1 Presentation M2 Presentation M3 Presentation M4 Presentation Final Evaluation Final Presentation Analysis Basics Design Basics Implementation Basics Evaluation Basics Phase 1: Paper Prototyping 04.11.20: Team assignment / Course introduction / Set up 11.11.20: Discussion of ideas 18.11.20: Group work 25.11.20: Deadline iteration 1 + milestone presentation 1 02.12.20: Group work 09.12.20: Deadline iteration 2 + milestone presentation 2 Phase 2: HTML Prototyping 16.12.20: Group work 23.12.20: Deadline iteration 3 + milestone presentation 3 13.01.21: Group work 20.01.21: Deadline iteration 4 + milestone presentation 4 Phase 3: Final Evaluation 27.01.21: Freeze of GitHub: finalization of prototype 03.02.21: Questions & answers 10.02.21: Deadline final evaluation + final presentation Next: Expectations Next: Expectations includeHTML(); "}, "pages/general/grading.html": {"url": "pages/general/grading.html", "title": "Expectations", "content": " IPP Expectations Introduction The team project aims to freely design and prototype an interactive mobile application in HTML/CSS/JavaScript. You will work in five iterations (with corresponding milestones). Throughout each iteration, you will follow the user-centered design process. This design process includes analysis, design, implementation and evaluation. Prototype functionalities will be freely and independently designed by your team, depending on your creativity in brainstorming, the gathered user and usability requirements, as well as your use cases and scenarios. The user will be able to perform interactions, for example: buying, listing, viewing, informing, playing, searching. Note: The course focuses on interaction prototyping. Even if your required/specified feature is not fully functional, you can simulate it and work on evaluating the corresponding user interface. General information on the practical course All the tasks during this project phase will be group exercises (groups of persons). We recommend that every team member practices and contributes to the implementation part of the exercises. Establish interdisciplinary teams for working on your prototype. Find a name four your group. Each of the five iterations is planned for a duration of two weeks. Please ensure that you have pushed solutions for all exercises to GitHub at the end of the iteration. Your repository will be https://github.com/interactionprototyping/GROUP, where GROUP is your group's chosen name. Set up a suitable file and folder structure; please indicate in the README.md, where your current version of your prototype can be found. Document your implementational and methodological progress/process throughout the whole project in a brief, but suitable manner (beginning at the first iteration) on GitHub. This documentation will be taken into account for your final grade and will simplify the final project presentation, as you have already structured your results. By using the history functionality of GitHub, you may furthermore return to earlier versions of your prototype. Expectations, requirements, and grading Final Grade Your final grade will consist of a methodology (50%, documentation and final presentation) and an audit of your prototype (50%, ergonomics and HTML). The methods part (documentation and final presentation) depicts your correct application of appropriate usability engineering methods. Do not only apply methods that have been presented or mentioned in class, rather read on and involve other methods you know or have read about. There are not \u201ccorrect\u201d or \u201cincorrect\u201d methods, so document the reasons for selecting or disregarding specific ones (both in your milestone and poster presentations). Document the results and insights they provided. The maximum credits can be reached based on the following expectations in descending (!) importance: Methodology The prototyping process is performed using a very structured approach. The choice of usability and user centered design methods are clearly motivated and correctly applied. More than the given methods were used. Iterations of the process phases are clearly visible. Results The selected evaluation outcomes are important and presented in a structured and clear way. The outcome of the evaluation is linked to concrete design improvements of the prototype. The results are discussed using the usability requirements as well as other appropriate criteria. Both evaluation outcomes as well as the implications for your prototype are critically discussed. Creativity The developed prototype is innovative and original. References The design and methodology choices are supported using literature (i.e. correct sources of the methods that have been applied), appropriate guidelines, design rules, or design patterns. Tools Various and multiple modeling/prototyping tools (paper, software) are used. The different provided tools are used appropriately. The prototyping part (i.e. the code audit) of your grade will consist of the assessed functionality and interactive behavior of your prototype. The maximum credits can be reached based on the following expectations, also in descending importance: Usability The prototype follows (not only the established) usability, readability and clarity rules (heuristics, patterns and guidelines). No usability bugs are present and found in the code audit. Techniques There is a very clean HTML structure. CSS is used accurately. The app stays on one page. The prototype relies heavily on JS and jQuery or other JS frameworks. Data is stored in objects. Interface components or APIs are used. Code is structured, reused and commented. Functionality Basic established use-cases (e.g., in case of a music app, playing any song in the library, or compiling arbitrary playlists) are functional. Level of Detail The created interaction allows a high (horizontal or vertical) capability. More than the tested experimental paths are implemented. \"Experiencing\" the app is possible in all program sections. Previous: Overview Next: Setup Introduction Next: Ideas includeHTML(); "}, "pages/tasks/ideas.html": {"url": "pages/tasks/ideas.html", "title": "Brainstorm ideas for an interactive mobile app", "content": " IPP Brainstorm ideas for an interactive mobile app An exemplary procedure Make a Mind Map of ideas for an interactive mobile application. By interactive, stress is on the interaction between the application and the user, rather than on the application functionality. Think of new and innovative ways how a mobile application can be used, write these down and create a Mind Map. Either make a hand drawn (take a photo) or a software based (see below) Mind Map. The primary objective of this mind mapping process is to come up with a application prototype that has both features and functionality. More information regarding features and functionality can be found in Section 2.1 of Nielsen's Guerrilla HCI . As you will see, features are referred to as the horizontal component of prototyping and functionality is the vertical component. The goal of this course is for you to have a broad understanding of the horizontal features (viz. interaction) and to, by the end of the course, have implemented a limited set of the vertical functionality (also, interaction). Generate ideas and select the best ones According to the creative problem solving process (and general brainstorming rules), strictly separate the two phases convergent (idea generation) and divergent (idea evaluation) thinking. Divergent thinking means a \"broad search for many diverse and novel alternatives\". Convergent thinking means a \"focused and affirmative evaluation of alternatives\". Separating those phases ensures, that you explore the topic broadly, consider all relevant factors, and find new alternatives. Further reading Guerrilla HCI by Jakob Nielsen, online article Brainstorming from Wikipedia Basic rules for divergent thinking are: Defer judgement Avoid any form (positive or negative), even thought, and defer to convergent phase. Strive for quantity Generate many options to get the chance of finding good options. Whether an option is good or bad is judgment and therefore deferred. Seek wild ideas \u201cWild and crazy\u201d or \u201cchildish\u201d ideas have great potential, even if it\u2019s easier to develop than to implement! Make connections / build on other ideas Combine and further develop existing elements, as thoughts are springboards for creating alternatives. Basic rules for convergent thinking are: Apply affirmative judgment Search for value instead of problems, this creates a positive attitude towards new (never perfect) ideas and their realization. Be deliberate Dedicate time to judging option, consider options and check against criteria. Check your objectives Options are answers to a question, always check the original question and whether or not an idea is on target. Keep novelty alive New options are created also because existing solutions are not satisfactory, so always consider the novelty of an option. Improve ideas An idea is a seed that needs time and care. Keep in mind to develop them further. Apply creativity techniques or creative thought processes for both divergent (e.g. brainstorming, ...) and convergent (e.g. telescoping, COCD Box, ...) phases (a good summarizing book is \"Thinking tools for creativity and innovation\" by Florian Rustler). Useful tools are post-its and glue dots. Further reading Creativity techniques from Wikipedia Creative thought processes from Wikipedia Thinking tools for creativity and innovation by Florian Rustler, book Mind mapping Mind mapping is a technique that can assist the process and document the results of a brain storm session. Read the mind mapping introduction on wikihow, which gives you a short description of the basics of the mind mapping technique. The website \"Mind mapping software blog\" goes into more detail on how to improve your mind map using color, keywords and images. There are many free mind mapping tools you can use. One of them is FreeMind, which is a software written in Java that can be freely downloaded. Further reading How to make a mindmap by Paul Chernyak (wikihow), online article Increase the visual impact of your mind maps with images and colorby Chuck Frey, online article Tool FreeMind Detailed description of three ideas Provided a more detailed description of three ideas that came up in the brainstorm. Describe the goal, functionality, and target group of the application. After considering all three options, pick a favourite one that you would like to develop further. Task Prepare a short Powerpoint of your different ideas for the next session. Previous: Evaluation Next: Research and interviews Next: Research and interviews includeHTML(); "}, "pages/general/set_up_client.html": {"url": "pages/general/set_up_client.html", "title": "The GitHub client - a graphical user interface for Git", "content": " IPP The GitHub client - a graphical user interface for Git Here we will explain how you can setup and work with the GitHub client in 3 easy steps. However, there are alternative approaches. If you as a team are more comfortable using other types of interfaces to work with Git, feel free to use those. Step 1: Create your local repository After installing and logging in to GitHub, you are ready to work with the Windows/Mac Client of GitHub. To advance the usability of working with Git as online cloud memory with several addons, you usually won\u2019t need any commands in this GUI. Below you\u2018ll find some views of the GitHub GUI in different modes. Start by cloning (press the icon) your group\u2019s online repository and choose a folder, where you want your local workspace to be. You\u2019ll now find your local repository overview in the left menu: This shelters all the additional functionalities, which GitHub provides. For example, you can now start editing the files in your working directory. Therefore right-click the repository and select Open in Explorer. There you can add files or edit the existing ones. Step 2: Commit Whenever a file is modified, you can create a commit (\u201csnapshot\u201d of your current project state). The GitHub client recognizes and summarizes the changes in the area \"uncommitted changes\", in the right area you will see all the changes in the files (and their differing content): You simply need to enter some text which describes your modifications (important for your teammates, e.g. \u201cFunctionality X improved\u201d or \u201cBug Y fixed\u201d) and press the commit button: Step 3: Push Before your edit appears online, you also need to push your changes from your local repository to the online repository. Instead of pushing/pulling, GitHub offers a synchronization of the online and local repositories. Simply press the corresponding button: You can explore the different revisions (or \u201csnapshots\u201d) by clicking the different commits in your history. There you get a view of the differences (added/removed code for each file) and the possibility of reverting changes: What if something goes wrong: Reverting and conflicts Imagine you made a commit in the past and later on in your project you realize: this was not, what you wanted to do. Git simply gives you the possibility, to revert a single commit in the past: Select the commit, you want to revert (in the history). Press the button (this is only possible, if all pending changes where committed), you now have to commit/sync the revert. If two (or more) persons modified a file simultaneously, this will result in a conflict which you need to resolve by merging. Github will amend the conflicting file with conflict markers: The marker for a starting conflict is , while the end of the conflict is marked with >>>>>>. The two versions are separated by =======. Open the conflicting document with an editor of your choice (e.g. Brackets) and resolve the conflict by deleting the unwanted version and the markers. A file could look like this: <<<<<<< HEAD Here is your change ======= Here is another conflicting change >>>>>>> origin/gh-pages Once you resolved the conflict, commit the merged file (don't forget to select it by clicking in GitHub in the \"Files to commit\" area). Hint: A good method to try to avoid merge conflicts is for each team member to work on separate pages or functionalities of the app (as long as this approach makes sense for your specific app). Branches There is a concept called \u201cbranches\u201d in GitHub, those are used for allowing a parallel workflow of multiple application versions in big software projects. Basically, one would create a copy of the existing application (create a branch), improve the functionality (without altering the main project branch, called the master branch), and once the functionality is there, discuss it and finally merge it to the master branch. For the interaction prototyping course, it\u2019s sufficient if you stay in the master branch (for private documents like tests, presentations, evaluation, \u2026) or in the gh-pages branch (for the development of your application, which then will be publically available in the internet). Keep in mind: the latter branch is publically available in the internet. You need to select the appropriate branch in the top bar of your GitHub client: Ready, steady, go! Find further information by reading the GitHub tutorials. Create an arbitrary HTML document in your cloned repository. Provoke a conflict: multiple authors are editing this HTML document and synchronizing changes. Try to resolve the conflicts by merging the edits. Try to revert to an earlier version. Discuss with your tutors: What is a commit, a synchronization, and a branch? Helpful links Git \"branches\" explanation GitHub Tutorials Previous: Setup Git Commands Next: Setup Development Environment Next: Setup Development Environment includeHTML(); "}, "pages/general/set_up_commands.html": {"url": "pages/general/set_up_commands.html", "title": "Git Commands", "content": " IPP Git Commands \"History is written by those who push first\" Git is separated into four levels: workspace/ working directory, index, local repository, and online repository. The Git commands allow to organize these four levels to realize the high functionality of Git. A few important commands are explained in the following graphic. Workspaces, branches, index, history, repository The following list briefly explains the concepts. Items marked with * are the levels, we're going to work with during the course. Workspace* The workspace is the actual folder on your computer, within you make your modifications. Index As kind of a meta-level, the index isn\u2018t directly visible or editable. Before commiting your modifications, GitHub creates this index, which will be posted to your local repository. Local & Online Repository* These repositories are the \u201ccontainers\u201c, where your project is stored. After all synchronisation, both repositories, online and offline, are all the same. Branches Working with branches allows to test different versions of one commit. If you are not sure, which possibility might be the best one, you simply set up another branch und implement both versions at the same time. After you made your choice, you have the possibility to merge the commits from the two branches. In order to access your HTML/CSS/JS prototype directly as a www app (contrary to inspecting the code in the www), you need to use the branch gh-pages. History* With the history function of Git and GitHub, it is possible to revert a single commit in the past or to roll back the whole project to a selected point. Basic Git Commands The following basic commands are necessary: Commit Commit a file to bring it under versioning control (you can later revert to this revision or compare differences) Push Push a file to bring it online (available for other team members) Checkout Checkout of a file brings it back to your workspace in a certain version (available for inspection and modification) Pull Pull a file to bring it from the online repository to your local workspace. Advanced Git Commands When using the GitHub GUI, you will find several buttons, which are not classic Git commands. These buttons often unite a few commands to one action that performs a special and necessary task. Again, items marked with * are the levels, we're most likely going to work with during the course. Sync* The snyc action unites the commands add, commit, push, fetch and checkout. By syncing your local repository, you do load the latest version of the online repo while updating the online version with your commits. Revert* The revert action creates a new commit that reverts all changes up to the selected commit (this means, the revert is also revertable). Roll-back The roll-back action reverts all changes that were committed after the selected commit. This is not reversible! Previous: Setup Introduction Next: Setup GitHub Client Next: Setup GitHub Client includeHTML(); "}, "pages/general/set_up_development.html": {"url": "pages/general/set_up_development.html", "title": "Set up the development environment", "content": " IPP Set up the development environment The device Get one phone (Nexus 5X) per team: for collecting it in room MW3304 (Lorenz Prasch), bring your ID card or passport. One team member needs to sign the lending and will be responsible for the phone until return at the end of the semester. The environment Set up an environment for creating HTML documents on your computer: Recommended Editor: Visual Studio Code Recommended Browser: Chrome Create a HTML page (e.g. the HTML skeleton in the slides) with some elements (headline, paragraphs \u2026) and open it in your browser. Access the Chrome developer tools and inspect the elements in your document. Activate the device emulation (Nexus 5X): Hint: If you have not already set up eduroam, do so for this project. Helpful links Visual Studio Code Google Chrome Tutorial: Opening a html page in a browser Setting up eduroam Starting the app You can now make your HTML accessible via github.io, a web server publishing all documents you have in the GitHub branch gh-pages. Go to your project repository: https://github.com/interactionprototyping/GROUP (where GROUP is your group's chosen name) Create a gh-pages branch, which is used to publish your site: Make gh-pages your default branch (go to , right side): The files, you commit to this branch, are published under http://interactionprototyping.github.io/GROUP/FILE.html (where GROUP is your group name and FILE the filename of the document you committed). Convention: If you name your application\u2019s starting page index.html, you don\u2019t need to enter a filename in your browser: typing http://interactionprototyping.github.io/GROUP will then be enough. You can access these files in your phone\u2019s browser. Wait five minutes for the first usage after setting up gh-pages. Previous: Setup Client Next: Analysis Next: Analysis includeHTML(); "}, "pages/general/set_up_intro.html": {"url": "pages/general/set_up_intro.html", "title": "Introduction", "content": " IPP Introduction Join Mendeley The literature presented in class and used in these exercises is available in the Mendeley Interaction Prototyping group, which you should join. There is a desktop client of Mendeley. Many of the papers and books are available online (inside the university network). You can also find papers or books through the university's eAccess. Helpful links Mendeley Interaction Prototyping group Mendeley Desktop Client TUM eAccess Join GitHub Choose a group name for your team. Each team member needs to set up a GitHub environment: Create free GitHub account Send your GitHub user names and your group's chosen name to You will be given access to the repository https://github.com/interactionprototyping/GROUP, where GROUP is your chosen name. Download and install the Windows or Mac client. Clone the gh-pages branch of your repository. Find instructions on this below. Helpful links \"What is github?\" (video) GitHub new account GitHub desktop client GitHub benefits GitHub is an online cloud service (online storage) which simplifies collaboration in IT projects. It is based on the software Git. The combination provides tools for solving conflicted versions of a file, merging different edits in the same document and backing up your project. The benefits of GitHub are threefold: Version control (all code revisions are stored, you can jump back) Collaboration (your team can work together on the code) Cloud (your app is stored in the internet and can be accessed via smartphones) Previous: Expectations Next: Setup Git Commands Next: Setup Git Commands includeHTML(); "}, "pages/tasks/M1_first_sketch.html": {"url": "pages/tasks/M1_first_sketch.html", "title": "Design: First sketch", "content": " IPP Design: First sketch First sketch Script Hello, I'm Lorenz and I welcome you to design practice! Finally, it's time to talk about designing our prototype. Keep in mind, design is more than just visual aesthetics. But before we come to the tools and methods, let me remind you of some theoretical basics. Here you see the interaction model we have already talked about. The blue circle highlights the process step we now work on: the human machine interface where users make their input into the machine. Here is a list of basic elements needed for designing an interaction. Basic elements for or used in interaction essentially often boil down to what is perceivable or can be manipulated by your users. Differences in motion, space, time, appearance, texture or sound can be used to convey meaning and guide users through your interface. For allowing our users to make their input we can give them different devices such as joysticks, buttons or trackpads. The input devices can be both physical and virtual. They are virtual if we for example implement a joystick into a touchscreen device which is the case in some mobile games. Furthermore, users can make inputs by speaking or gesturing. Of course, they can only do this if we design our human machine interface in a way that it reacts to such kind of input. Gestures that are very common are swiping and shaking. Another very elaborate way of communication are brain commands, but those have not yet become part of everyday life. When it comes to user input regarding forms, so essentially gathering information from the user, we can use nearly all of the mentioned input controls such as virtual or physical keyboards or handwriting recognition. Depending on the kind of information that you want to gather, drop down menus or toolbars might be the better choice. As you can see, we have many different possibilities for allowing our users to make inputs into the system. There are a lot of things to consider while designing the interaction and for this purpose, we have a few standards at our hands that can help us decide which way of interaction is adequate for which system in which case. Here are a few more standards. We recommend that you click on the links below this video and browse in these standards a little bit so that you can get an overview. Further reading ISO/DIN Norm Catalog (access through TUM Login) by Perinorm, website Contrast Checker by WebAIM, website Mobile Web Best Practices 1.0 by W3C, website Web Content Accessibility Guidelines 1.0 by W3C, website HTML 5 Standard by W3C, website Previous: Research and interviews Next: LoFi Paper Prototyping Next: LoFi Paper Prototyping includeHTML(); "}, "pages/tasks/M1_paper.html": {"url": "pages/tasks/M1_paper.html", "title": "Implementation: LoFi Paper Prototyping", "content": " IPP Implementation: LoFi Paper Prototyping LoFi Paper Prototyping Script Hi I'm Lorenz and I welcome you to the introduction of implementation practice. When implementing, there's a bunch of methods and tools that you can apply. Let's have a sneak peek into two categories of prototypes, why you would use them and which are some of the tools that you can use to achieve the desired results. As you should know by now, when we speak of implementation we do not necessarily mean coding. In this phase, we subsume everything that you do when bringing your prototype out of your head and making it a reality. And I cannot stress this enough, a prototype is an entity that can represent a certain idea without having to explain it first. This is why stories or simple sketches are as good as a prototype and in many cases better than semi- or fully-functional applications. So, let's start where everyone should: with low fidelity prototypes. Paper prototyping, or the use of simple sketches of screens and options to get a feel for your prototype, might not seem fancy but it's the oldest trick in the book for a reason: it works. Since one of the essential goals of prototyping is the identification of flaws or mistakes as early as possible in the design process, simply putting them on a piece of paper is a rational first step. Sometimes you'll notice the flaws in your design right away when you have sketched some screens and, because it's deliberately shitty, it shouldn't be a problem for you to admit that. This way, paper enables you to avoid one of the most dangerous traps for user-centered design: falling in love with your prototype. Humans have the tendency to judge something that they have spent a lot of resources on, be that money, time or whatever else, as of higher value than it might actually have. This is a basic psychological process and, by the way, one of the reasons why fraternities have so many initiation rights, and terribly dangerous for developing products. This is the reason why you want to make your paper prototype as quick and dirty as possible. Use simple materials, do not be artsy with your sketches. A good paper prototype is not a beautiful one! The sketchy look also facilitates honest feedback. If something does not look like you've spent hours creating it, people will not feel bad about their criticism. Some additional tips and tricks when you start prototyping on paper: Use a pen, not a pencil. Why would you use a pen, though? Well, the pen creates a sense of commitment. After all, it's impossible to erase it. This facilitates two things: a) if something goes bananas, you have to throw the sketch away, this ensures that you don't spend too much time on it, since the risk is inherently there already. B) when you've started a sketch, you're more likely to finish it because it feels more final than a rough draft with a pencil. Mobile first: if your application will be available on a mobile phone, which it is in this course, you should prototype for the mobile screen first. Because of the limited size you'll have to immensely prioritize what you want to display and won't have any problems to scale it up for a desktop application in the long run. Don't polish: paper prototyping is not about perfecting your arts and craft skills, it's about finding a solution to a problem as fast as possible. Don't spend time making sure everything looks perfect or is aligned correctly, just remember most likely you'll end up throwing your sketches into the trash as soon as they have fulfilled their purpose anyways. When testing, don't underestimate the stress that a proper user test with a paper prototype will put you under. In order to make sure you actually obtain all the relevant insights, have a dedicated interviewer and another person \"operating\", so to speak, your prototype. Depending on your method of documentation, essentially anytime you don't record the entire thing via video it is also a good idea to have a third person writing everything down. If you can't or don't want to prototype on physical paper, for example, if you do your evaluations online or you work in a remote team, there are several tools to do a digital paper prototype. The big difference to digital high fidelity tools such as Photoshop, Adobe XD or similar is, again, the deliberately sketchy look of it. Using Nielsen's (2012) Usability 101, create sketched early stage vertical prototypes on paper of (more than five) different views of your interactive application that address your analysis and design stages. Further reading Usability 101 by Jakob Nielsen, online article Paper Prototyping by Jakob Nielsen, online article Task 3 Upload your screen images to a folder iteration-1/prototype in the GitHub master branch. Previous: First sketch Next: Thinking Aloud Next: Thinking Aloud includeHTML(); "}, "pages/tasks/M1_presentation.html": {"url": "pages/tasks/M1_presentation.html", "title": "Presentation M1", "content": " IPP Presentation M1 You will demonstrate your methodological findings and your early stage prototypes during the next Interaction Prototyping session. Prepare a 10 minute presentation on your approach and the corresponding results, covering all the work done in the first iteration. Don\u2019t necessarily proceed task-by-task, but rather tell a methodological story (why you chose certain methods, techniques or tools). Demonstrate the work in progress and formulate questions to debate with the experts in the plenary during a 10 minute discussion. Task 5 Upload your presentation (.ppt or .pdf) to a folder iteration-1/presentation on the GitHub master branch. Previous: Thinking Aloud Next: Goals and design principles Next: Goals and design principles includeHTML(); "}, "pages/tasks/M1_research.html": {"url": "pages/tasks/M1_research.html", "title": "Analysis: Research and interviews", "content": " IPP Analysis: Research and interviews Interview methods Interview Script Hi, I'm Lorenz and welcome to Analysis practice! In the analysis phase we have different methodologies at our hand. In this lesson, we'll show you how you can gather information on the users, their goals and the usage environment. Let's start with interviewing our potential users. One popular approach is to conduct moderated discussions, which are called focus group interviews or focus group discussions. Since you have several conversational partners at once, who also should interact with each other, it is very important to be well prepared. You already should have knowledge about the topic you are discussing and an idea about what you want to know. Therefore, you should prepare a guideline for your interview with questions you can ask your participants. Formulate the questions openly so a discussion can emerge. During the discussion you are a moderator, not a participant, thus, you ask your more or less general questions and then let the panelists answer and discuss. It would be good if you also have more detailed questions on a topic in case the participants digress or the conversations comes to a halt. But remember: even when asking detailed questions you should never be suggestive. The entire discussion should be recorded on tape, since it is very hard to protocol the conversation and moderate it simultaneously. And even if you have an assistant, it is impossible to capture every single sentence. Since the interaction between the panelists is also very interesting, the manner participants say something can also contain valuable information. Your record should be transcripted afterwards, so you can analyze the transcript systematically. Besides the interaction between the participants, one further advantage of the focus group is that we explore different opinions in one discussion and also directly gather comments on these opinions by the participants. Another way of gathering information is the expert interview. This is a more classical face-to-face method. As the name suggests, our interview partner is not an average user, but an expert in a field you're interested in. In this way, you can build up insider knowledge non-professionals do not have. Before we choose our expert, it is wise to define our field of interest and why we need which kind of expert. Our choice should then depend on the insights we want to gain. In the preparation phase, we also should generate a guideline questionnaire divided into subtopics. Our questions should be open and therefore allow the expert to answer broadly so we can find interesting information where we were not looking for it initially. Our guideline should be structured in such a way that the most important questions come first, because the interview might run long, so we don't get to our last questions before the time is up. As already mentioned, the participant should have the freedom to answer broadly, but we also should try to keep him within our topic without disturbing the natural flow of a conversation. As in the focus group discussion, our interview should be recorded, transcripted and analyzed systematically The problem-centered interview is also a face-to-face approach. Our participants are people who are familiar with a specific problem that we want to solve. Here, we prepare mainly questions for the beginning and the end of the interview. The interviewee guides us to the bottom of the problem. Consequently, we try to evoke storytelling. In this way, we are able to understand the problem from its beginning. As it is a flexible way of conducting an interview, we might have to ask some ad-hoc questions appropriate for the participant's story, which cannot be prepared before the conversation. Another form of interviewing is the contextual inquiry. This method allows us to gather more than statements but also information on the behavior and the environment of our users. Before we start, we have to decide on which information we want to gather. In this way, we don't get distracted by unimportant information and we can focus on our research topic. The contextual inquiry takes place in the natural environment the user uses our product in or will use our future product. While conducting the inquiry, we observe the participant and ask questions. This gives us the opportunity to find out what factors influence the usage, how users interact and what they think while interacting with a product. After the contextual inquiry we analyze the statements as well as the behavior of our participants. In the preparation phase of the UX laddering we gather questions serving this particular method of interviewing. We ask our participants about attributes they associate with a specific product. Each of these attributes has a consequence for the user, for example, the attribute of a mobile phone could be that it has a good camera, then the consequence is that the user is able to take photos representing the reality with accurate colors. The consequences of the attributes can then lead us to the participants' core values. In our example, the core value could be that the good camera gives the participant the feeling to be able to conserve memories very well. Asking \"why?\" questions repeatedly can help us getting to those consequences and core values. For the analysis of our data we can use the hierarchical value map. Who to interview (see Cooper et al., 2014, p. 46) What different sorts of people might use this product? How might their needs and behaviors vary? What ranges of behavior and types of environments need to be explored? Interview tips Transparency/ traceability is important Record the interview in order to assure conclusions can be reproduced Be curious but reticent Your own opinion should not be evident to the interviewee Don\u2019t ask suggestively Ask open questions and listen actively Further reading Inclusive Toolkit by Microsoft, pdf Guerrilla HCI by Nielsen (1994), paper Go beyond user interviews with contextual inquiry by Patrick Thornton, online article 10 moderating tips for focus groups by Lisa Boughton, online article Focus Groups by TED-ed, video Video examples \"Moderating focus groups\" by Richard Krueger \"Example of Laddering with hints and tips\" by Joanna Chrzanowska Observation Observation Script Sometimes, it's advisable not to get actively involved into the process of analysis. This is where observation techniques come in handy. One popular technique is the master-apprentice model. The first principle of the model is to observe the users in their natural environment. This way, we do not only get insight formulated directly by our user, but also gather information on the context the product is used in. The second principle is to create a relationship between the researcher and the user that follows the structure of a master-apprentice relationship. The researcher is the apprentice and the user is the master. When using the master-apprentice model. it is crucial to interpret what the user is saying, meaning reading between the lines, since sometimes there's a hidden message when a user talks to us. It is also important to focus the conversation. Don't get me wrong - it's beneficial for us if the user makes comments that seem uninteresting in the first place, since these comments sometimes are very insightful when analyzing the data, but it's also important to get the conversation on track again when the user moves off topic too far. When we want to observe our users, we can choose from different methods. There is the control observation, which resembles an experimental setting and there is the naturalistic observation, which consists of observations in the user's natural environment. The participant observation is a sub-type of the naturalistic observation, but with the difference that the researcher is not an uninvolved listener but becomes part of the group he is studying to gain insights to. Before recording data, we have to decide which technique we use. We could choose the event sampling method which is defined by only recording specific events or specific behavior of our participants. Any behavior different from the predefined one is not recorded at all. The time sampling method says that we only record data at a specific time or time frame. Everything that happens before or after this predefined period is not recorded. The third method, the instantaneous sampling method, is defined by only recording predefined moments. When it comes to the roles the observer can take, we have different possibilities and can be creative. This boils down mostly to how distant the observer is to the participants both psychologically as well as physiologically, but it's very important to choose the role that is most beneficial for answering our research question. As you can see here, the researcher can be detached from the observed group but he could also be a group member and act as a part of the group while observing. We could even choose a participant to be the observer. Another very exciting way of observing is the method called \"complete participant\", in which the researcher acts as part of the observed group without the group even knowing that there is a researcher or an ongoing observation Diary studies are very helpful if we want to gather information on the usage behavior in terms of times and frequencies of usage. Users log their actions and activities and thus enable us to learn a lot about their usage habits, the usage environment, users' motivations for the usage and even changes in their behavior. As you can imagine, this is some effort for our participants and therefore it is advised to recruit dedicated users when we're fast enough to analyze our data. Immediately we're even able to ask follow-up questions based on the user's diary entries. If you choose to conduct a diary study, you can take a deeper look into this slide and click on the link below the video where this technique is described in greater depth. Here, you see the most important steps regarding the preparation, the briefing of the participants and the other steps you have to take. As you see, it is an elaborate technique but you might gain insights you would never gain just conducting a face-to-face interview. Further reading Diary Studies: Understanding Long-Term User Behavior and Experiences by Kim Flaherty, online article Observer Guidelines for Usability Research by Susan Farrell, online article Product Development Process: Observation by David M. Kelley, video Analysis Analysis Script Well, since we're talking about analysis in this section, we finally come to the analysis part of this practice lesson. In short, after you have generated data, how do you process it? Hierarchical Task Analysis helps us understand problems users might face while conducting a specific task. To achieve a goal our users normally have to take several steps, which we can define as sub-goals. For the task analysis, we analyze all actions the users have to take and the associated sub-goals in the correct sequence. The outcome of such a task analysis is often a diagram, which depicts all steps users have to take to achieve their goal. The goals are divided into sub-goals and as you can see, it is important to maintain the real sequence of actions. Such a diagram can help us find the problems users might have when they try to achieve a goal by interacting with a system. We provide a link in the description of this video for further material on the topic. Now let's get to a method which is very useful and popular: creating personas. The nice thing about personas is that we can harvest the fruits of our efforts now. All the information we have gathered on our users now becomes crucial. The work we've done so far will lead to a persona. Will it be an Alessandro, who loves to go fast, or will it be a Marge, who appreciates safety and comfort? As you can see here, focusing on everybody's needs at once can lead to a product not really usable by anybody. Personas help us determine who our products shall be designed for. They help understand the goals users wish to achieve. Furthermore, they make it easier to discuss our product with other developers and stakeholders, as the personas are more concrete in comparison to a vague target group with different and sometimes inconsistent demands. It's like talking about a real living person which can also serve us to evaluate whether a product is effective and assists the user the way it should. As already said, when we speak about a persona it would be best if it feels like talking about a real person. Therefore, our persona needs details, personal information like gender age and personality characteristics. Is our persona rather thrill-seeking like Alessandro or does she like it more comfortable? What does her life look like, does she have a job and if yes what does she do for a living, does she like it? What does she do with her spare time and what are her goals and wishes? You see, you can be very creative here, but be careful: every single characteristic should result from your research into your potential users. While constructing personas it's important to understand the difference between a stereotype and an archetype. A stereotype is a commonly known but oversimplified image. This leads to seeing an idea or group in a rather exaggerated, close-minded way. In contrast to this, an archetype is a typical image which includes specific characteristics and fits fundamental human motives. This is exactly what a persona should look like: a prime example and reliable realistic representations for a target group. Insight for this needs to come out of quantitative or qualitative research or web analytics rather than preconceptions. Well, here are some basic rules when it comes to personas. As you can imagine, we speak of one person when we say persona, so do not describe a group. Use archetypes not stereotypes and, as already mentioned, but i will say it again to emphasize the importance, your persona should be based on your collected data, the information you gathered in previous steps not only your beliefs and assumptions. Also, do not try to describe the average with your persona. It is more exciting and useful if you describe a rather extreme character. Next, we have the quote of all quotes regarding user-centered design or user-centered perspective. It is often used by critics in terms that the users are not always right. Allegedly said by Henry Ford - though probably not - it still captures the essence of what he thought, we shall see if he was right. If you look at these pictures you can imagine what insight we're aiming at. Sometimes, it's not the most important thing what users say they want to have, but what they want to achieve. Since it could be that our users are not very creative in coming up with ideas, we should do the work for them and for this purpose what we really need to know to help them are the jobs to be done. When we look at the jobs to be done, we have to keep in mind that there are different aspects one job can have. There are functional, social, personal and emotional aspects connected to a task. Moreover, sometimes there's not only the main task, the job we're talking about, but also related jobs to be done, which also have the functional, social, personal and emotional aspects. If our job is for example brushing our teeth, our goal is having clean teeth. The functional aspect of this job is removing foreign particles, while the social aspect could be that we want to be perceived as having white teeth. The related job to be done could be not wasting too much of our time getting clean teeth, therefore, the functional aspect here is being efficient and the social aspect would be that we want to be perceived as a person who uses products of high quality. What are the differences between personas and jobs to be done? The most obvious one is that we put our focus on the user and the potential differences between them when we create personas, while our focus is really on the task and when we work with jobs to be done. But in comparison to the task analysis for example, we put less focus on the single steps the users have to take to achieve their goal. A scenario is defined as a specific story to construct and illustrate our design solutions. They are the first step we take when we are about to make designed solutions. We create a narration with our personas in the leading role, containing the problem the persona faces as well as the solution. Here are two examples for scenarios. As you can see, we have a persona Vivian and a job or tasks she has to solve. The narrative also contains the actions Vivian can take to achieve her goal. Our design solution is then the product Vivian could have used in this story to solve her problems. In a scenario, no detailed information on the interaction with a potential design solution is described, while use cases are part of the required catalog, defining the system responses to our user's actions. A scenario shows the bigger picture by storytelling and can be divided into several use cases. Use cases then consist of the goal of an action, the trigger of an action, for example a user interaction, and the single steps the user or the system takes to achieve the goal. As you already know, users or their tasks are not the only important aspects for us, but also the context in which the users fulfill their tasks. The context of use analysis helps investigate the conditions under which our product is used and the factors that might influence the usage. Therefore, we have to include in our analysis the user, their goals and their equipment, as well as the environment. Not only the physical, but also the social environment is of interest, as, for example, the presence of other people might have an effect on the interaction with our product. When we want to evaluate our product, sometimes it is wise to also conduct the user study in the natural environment to increase the external validity. Further reading Chapter 5: Modeling Users: Personas and Goals by Cooper (2007), book chapter in About Face 3 Chapter 6: The Foundations of Design: Scenarios and Requirements by Cooper (2007), book chapter in About Face 3 How to improve your UX designs with Task Analysis by Andreas Komninos, online article Personas by Usability.gov, online article Personas vs. Jobs-to-Be-Done by Page Laubheimer, online article Creating Personas Is Like Sorting Rocks by NNGroup, video Why personas fail by Kim Flaherty, online article Qualitative research Before you get started, take the time to get to know your users. Use a qualitative research method or a combination of methods of your choosing with at least 5 participants to better understand your target group. Some ideas (to which you are, however, not limited) include: A (structured) interview with your participants to find out about their wishes, and ideas as well as potential problems, features, etc. You could also draw inspiration from Microsoft's Inclusive Design Toolkit. A thinking aloud experiment (Nielsen, 1994) or contextual inquiry, if a similar application already exists. A diary study over the course of a few days, in order to obtain longitudinal data. A diary study over the course of a few days, in order to obtain longitudinal data. User Goals and Personas Create 3 personas based on your contextual inquiry or interview. Specify user goals linking the personas you created and the information from your contextual inquiry or interview. The goals of the personas are a tool to derive the functionality that is expected of the application. The functionalities should fullfill the users' goals. Focus for this practical course on the experience and end goals of the user. You can also familiarize yourselves with the Jobs-To-Be-Done framework, a relatively new technique that focuses on user needs. This approach has grown in prominence in recent years, and can be used complimentary or as an alternative to personas. Scenarios Write user scenarios (narrative) in which the personas use your mobile app. Use the personas to come up with scenarios in which the app is utilized. Templates Personas by Tony Ho Tran Jobs to be done by Tony Ulwick Jobs to be done 2 by Mural Tasks 1 & 2 Summarize the results of your qualitative research (not more than 1 page) in a folder iteration-1/user-research in the GitHub master branch. Document your personas and scenarios (e.g. in .ppt) in a folder iteration-1/user-research in the GitHub master branch. Previous: Ideas Next: First sketch Next: First sketch includeHTML(); "}, "pages/tasks/M1_thinking.html": {"url": "pages/tasks/M1_thinking.html", "title": "Evaluation: Thinking Aloud", "content": " IPP Evaluation: Thinking Aloud Empirical Evaluation Script Hi, I'm Lorenz and I welcome you to evaluation practice! Now, we get to the information you need to conduct an evaluation yourselves. First, we will speak about empirical evaluation. Here, you can see what we mean by empirical evaluation in contrast to analytical evaluations. Empirical evaluations include users while the analytical ones work with experts. Different methods rank among empirical evaluations, for example focus groups, interviews, field studies and experiments. For detailed information check the literature link provided below this video. This is the empirical cycle based on A.D. de Groot. Normally, we start with an observation, generating for example qualitative data, which can help us forming hypotheses. In the induction phase we find explanations for the observed phenomena and formulate the hypotheses. In the deduction phase we think of ways and methods to test our hypotheses, so we deduct consequences of the hypotheses as testable predictions. Then, we test the hypotheses and collect new empirical material, which we evaluate and interpret afterwards. The evaluation can lead to a theory, which should be the most reasonable explanation for the observed phenomena as a result of the experiment. You might wonder what i mean by saying experiment. It is a method to test hypotheses or gather new information or to discover new knowledge. By using experiments we can investigate the correlation or relationship between different variables. A usability test for example, is applied experimentation. One form of experiments is called task-based experiment. Before applying the method, we have to define a task that participants have to perform. The task we choose is dependent on the research question we try to answer by means of this experiment. We can measure different objective data, for example how many errors are made, how long does the task take or we measure subjective data like how satisfied were the users performing the task. Even though we defined the task, the participants have to perform. This is a natural kind of testing since usually the tasks are made up in a way so they closely resemble tasks that real users would perform while using the systems. One downside of the task-based experiment is that it requires the layers used for the task to be implemented or at least a wizard-of-oz setup. We can use a wizard-of-oz setup in an experiment when we want to simulate a degree of maturity of a prototype. For example, we can simulate an intelligent system with speech output even though we have not yet implemented this. The test persons in this experiment think they interact with, for example, an AI but in reality they interact with another user or an expert acting as the system. In this setup, it is important that we choose tasks that can be sufficiently performed by a human instead of a computer. An additional caveat of this method is that we have to be careful with interpretation, since the wizard might perform better, for example in the speech recognition than an AI would. This could lead to unrealistic expectations towards the system's capabilities. Another good way to gain insights from different people into different topics are interviews. For example, we could interview users about the clarity of a software function, presentation or how they like the interaction with the software. Moreover, we can find out which difficulties users face while using the system. But we can also interview for example stakeholders to find out what they attach importance to. For further information on interviews we recommend you take another look in the analysis section. Field studies: another way of collecting data can be conducted when we want to observe users in their natural environment using our system to find out which problems they might face during regular usage under realistic conditions. Another interesting use case for field studies is to observe users performing a task before we even have built a prototype to generate ideas and identify opportunities for new technology. We can gather information we can use for defining requirements and therefore lay a foundation for the user-centered design process. One way of qualitative evaluation is the focus group discussion, or also called interview. We have already talked about this in the analysis section but here on this slide you can see two important facts about the method. By showing a group of users a prototype we can find out about their opinion, which can be done early in the design process. By interacting with each other, the users might recognize positive or negative aspects about the prototype they maybe would not have noticed alone. But this group dynamic can also influence the subjective opinions which should be kept in mind when performing this method. Run a thinking aloud experiment, as per Nielsen\u2019s (1994) paradigm Discount Usability Engineering (a small group of 2-5 persons is sufficient). An important rule is established in Pereyra's (2015), principle 10: \"Don't grade your own homework\". In 10 steps to engaging user experience: involve users as subjects, you\u2019ve not asked yet! Record the evaluation in a suitable manner and discuss usability issues and possible improvements. Further reading Guerrilla HCI: Using discount usability engineering to penetrate the intimidation barrier by Jakob Nielsen (1994), paper 10 steps to engaging user experience by Irene Pereyra, paper The 20 UX tips you need to know by Jamie Shanks, online article Interaction Design: beyond human-computer interaction by Sharp et al., book Task 4 Upload a short usability report including your conclusions (not more than 1 page) to a folder iteration-1/thinking-aloud in the GitHub master branch. Previous: LoFi Paper Prototyping Next: Presentation M1 Next: Presentation M1 includeHTML(); "}, "pages/tasks/M2_from_LoFi_to_HiFi.html": {"url": "pages/tasks/M2_from_LoFi_to_HiFi.html", "title": "Design: From LoFi to HiFi", "content": " IPP Design: From LoFi to HiFi From LoFi to HiFi Script Now that we've got the basics covered, how do we get from a lo-fi prototype to a hi-fi prototype? The goals of design patterns are reducing time and effort for new projects and improving the quality of our design. Furthermore, they help facilitate the communication between the designers and programmers. Patterns are considered a design solution for specific problems in specific contexts. On the next slides, we will give you an example. But before we get to the example, we should know what a design pattern consists of. It should have a name, a context, a problem and a solution. As you can see, the action bar from material design covers this in a small overview. It additionally mentions another key aspect that design patterns can cover: consistency. If something is tried and true, why not stick to it? Now here we see the bar in action: The action bar, which is also the name of the pattern. The context of this design pattern might be within a mobile app, which is designed for performing multiple actions. Now, due to the fact that the app is capable of multiple actions, the users have to be able to switch between those actions and, moreover, every action should be accessible on every app screen. Our solution here is the action bar, which is permanent at the top of the screen allowing access to different actions on every single page. An additional concept that might be worth a thought when implementing human machine interaction is gamification. Lazzaro identified four fun keys, those are: hard and easy fun, serious and people fun. The different types of fun consist of different elements fulfilling different purposes. Hard fun for example consists of goals, challenges, obstacles, scores and levels, which all help creating a challenge for the user. The elements of serious fun such as learning, simulation or collection have another purpose. They can create something of value outside the game, for example knowledge that helps in the real world. An important point however when designing your prototype is: don't go for all of them. Even when you're developing a game, one or maybe two fun keys done right is much better than all four done haphazardly. Gamification is not the same as game design. In gamification we have game-like elements in a non-gaming environment, but there is one thing that is important to both and that is the user, or we might say, the player. \u00cdf we understand our players, well, it is easier to meet their needs. There are four player types of MUD (=multi-user dungeon) as identified by Bartle in 1996. He not only focuses on the individual type but also how the player types perceive each other. He also suggests that there are dynamics that cause the proportion of player types to vary within a game, for example, to decrease the amount of explorers you increase the number of killers. To steer the players that are attracted to your game Bartle identifies how you can emphasize one extreme of an axis over the other. For example, if you wanted to highlight players over the world, you could make it easier for players to communicate with each other or maximize the number of simultaneous players. To instead highlight the world, you could make it simply bigger or make it possible for many players to build something within the world. Apply your knowledge gained from analyzing UML, usability requirements and goals, as well as the principles: Put to the side your paper prototype from the first iteration and redraw it using what you have learned (e.g., principles). Do not fear fear - just do it; \"the chance of you hitting the bulls eye with you first shot is very slim\" (Pereyra). Also use the findings from your evaluation of the first iteration. To see why this is important, see \"Paper prototyping\" according to the Nielson Norman Group. Further reading User Interface Design patterns by UI Patterns, website Little Big Details by Floris Dekker, blog App Dissection by Brian Lovin, blog Design Details by Brian Lovin & Marshall Bock, podcast Task 7 Upload your screens iteration-2/design in the GitHub master branch. Previous: Goals and design principles Next: HiFi Prototyping Next: HiFi Prototyping includeHTML(); "}, "pages/tasks/M2_goals.html": {"url": "pages/tasks/M2_goals.html", "title": "Analysis: Goals and design principles", "content": " IPP Analysis: Goals and design principles Goals, Design Principles and Requirement Script The unified modeling language - or UML - is used for software engineering projects. It can help us define our use cases by means of a use case diagram. These are also very helpful when it comes to communicating our use cases to stakeholders or software developers. We can use UML to visualize the entire design of our software. We recommend you look into the link we provide you with below the video to understand how we use this modeling language to define use cases Design principles are very useful when you come to designing a prototype or even a product. These are generally applicable guidelines that address issues of behavior, form and content. Essentially, there are a set of rules based upon our values as designers and our experiences in trying to live up to those values. The pyramid on the right side shows you the importance of different values and principles and, as you can see, the design values are those everything regarding our software is based on. Conceptual principles help define what a product is and how it fits into the broad context of the use required by its users. Behavioral principles define how a product should behave in different situations and interface level principles are strategies for visual communication of behavior and information. When we have a design and a concept, we should check if we have considered all the heuristics. For this purpose we can use this visual presentation where every heuristic is depicted with checkpoints. As you can imagine, this is only an extract but you can find the whole graphic in the paper linked below this video. This paper also shows results of a study testing the usefulness of this proposed checklist for avoiding usability gaps even with non-trained developers. When we write down requirements for our product, we have to ask what our users need and what they want to achieve. Requirements consist of the actions our users take, the objects that are available on the user and the context. But be careful: we're not talking about functions or features here. These are the solutions for the user's problems the tools the requirements can be fulfilled with. We've already written the narratives, which are our use cases, now, i ask you how do you extract your requirements? Here's an example for you: Thanks for the attention and see you next time! Use cases (UML) Specify your application functional requirements based on your personas and goals in a formal way. Use UML Use Case Diagrams (see Chapter 2 Miles, 2006) to describe the functional requirements of your application (e.g., buying, listening, rating, searching). Consider paths from starting the app until performing a certain action/goal (for example, in case of a music application, listening to a specific track). Consider deviations from that path (like, for a music application, \"music not found\", \"music not offline available\", or \"song preview\"). Ensure that the requirements match different application functionalities (e.g. media library, media store, playback functionalities). These are of course dependent on the original idea of the app. Use a graphic tools of your choice or an online tool like Creately (register for saving or take a screen shot) Further reading Chapter 2: Modeling Requirements: Use Cases by Russ Miles & Kim Hamilton, book chapter in Learning UML 2.0 Templates UML diagrams by Creately Task 6.1. Document (e.g. in .ppt) your UML use-cases in a folder iteration-2/Analysis in the GitHub master branch. Usability requirements and goals Use your scenarios to create usability requirements and goals. The functional requirements you have already defined in the UML use cases. Check if these requirements are fullfilled with your current prototype. Feel free to adjust your requirements if needed. Note that, usability goals are user oriented and operationally defined. Further reading Chapter 6: The Foundations of Design: Scenarios and Requirements by Cooper (2007), book chapter in About Face 3 Principles Search and familiarize yourself with a set of suitable design principles that reflect the usabilty requirements and goals you specified above. Do not just (or worse: define as not applicable) the buzz-phrased principles, rather read them (and their sub-categories) in detail. It is suggested to orientate yourself to the Nielsen's 10 Usability heuristics, and read other rules as information. Further reading Chapter 5: Usability Heuristics by Nielsen (1993), book chapter in Usability Engineering Chapter 8: Synthesizing Good Design: Principles and Patterns by Cooper (2007), book chapter in About Face 3 Heuristic Evaluation on Mobile Interfaces: A New Checklist by G\u00f3mez et al. (2014), paper 8 golden rules of Interface Design by Shneiderman, online article First Principles of Interaction Design by Tognazzini, online article Task 6.2. Document (e.g. .ppt) your (new) requirements, usability goals and exemplify how the principles were accounted for and improvements needed in a folder iteration-2/analysis in the GitHub master branch. Discuss them with your tutors. Previous: Presentation M1 Next: From LoFi to HiFi Next: From LoFi to HiFi includeHTML(); "}, "pages/tasks/M2_heuristic.html": {"url": "pages/tasks/M2_heuristic.html", "title": "Evaluation: Heuristic Analysis", "content": " IPP Evaluation: Heuristic Analysis Heuristic Analysis Script Now we get to the analytical evaluation. The analytical approach of evaluating consists of methods like heuristic evaluation, modeling and cognitive walkthroughs. It generally employs experts rather than users. On the next slides, we will discuss this approach in more detail. The heuristic evaluation is often based on the 10 usability heuristics by Nielsen, which we already have talked about in the analysis section. For this process, we rely on experts and not on actual users. These experts use our prototype, sometimes they slip into the role of a persona we have identified earlier and try to identify possible problems that can occur while interacting with the product. After the individual evaluations with the different experts, a joint session where the experts can exchange their thoughts is possible. For the heuristic evaluation, we have to brief the experts. It's important that every expert receives the same briefing. Afterwards, the experts spend one to two hours independently inspecting the prototype. Often it is helpful when the experts take at least two passes through the interface. The first pass to get a feeling for the flow of interaction while the second pass allows the evaluator a closer look at specific interface elements in the context of the whole prototype or product. This way, the expert can identify potential usability problems. In the debriefing session, the experts come together to discuss their findings and to prioritize problems and suggest solutions. When conducting a heuristic evaluation we can use this severity rating scale. When a participant rates an aspect of our prototype with a 4, we should feel obliged to fix this problem before we release the prototype as a product. We recommend you take a look into the different rating attributes and to click on the link regarding this topic for further information. This becomes especially interesting for you when you're about to evaluate your own prototype for this course. Another form of analytic evaluation is the cognitive walkthrough. Cognitive walkthroughs involve simulating a user's problem solving process at each step in the human computer dialog, checking to see if the user's goal and memory for actions can be assumed to lead to the next correct action. For this method, we let users perform a task and focus on issues on the cognitive level, which means we ask if the user has problems understanding the interaction. Does he know what to do and how does he actually interact? When our system provides feedback, does the user understand if his actions were correct or not? During this walkthrough, it is interesting for us to find out if the user recognizes the next interaction step to achieve the task or if he does not know what to do next. Furthermore, we want to know if it is apparent for the user that the correct action is available and if the user is able to interpret the feedback from the system correctly. On this slide, you can see the process of the cognitive walkthrough summed up. For this method, we have experts who slip into the personas we have created before and then perform specific tasks using our product. They answer our questions, try to identify issues and document what we need to change about the system. Afterwards we can revise our design based on the expert suggestions. Besides the heuristic evaluation and the cognitive walkthrough, we also have the possibility to create models predicting how users would interact and how efficiently they would be achieving a task based on physical and mental operations needed for this specific task. For this method, we do not even need experts or users for that matter. Here, you can find examples for GOMS models GOMS stands for \"goals, operators, methods and selection rules\" the model was developed in the early 1980s as an attempt to model the knowledge and cognitive processes involved when users interact with systems. We ask what the users want to achieve, which actions need to be taken to achieve the goal, what are the steps to be taken to achieve this goal and which methods are used in which context. KLM is one variant of GOMS models. It provides actual numerical predictions of user performance and is computational. It predicts how long it will take an expert user to accomplish a routine task without errors using an interactive computer system. As you can see here, the keystroke level model consists of six operators. Here is an example of the keystroke level model. You can find further details in the publication by Sharp at al., which is linked below this video You might wonder why we should use models when it is apparent that any assumption could be wrong. Well, the answer is quite simple: it is cheaper and often less time consuming than an evaluation with real users or experts. Do a heuristic usability evaluation of the POP prototype from your your partner group (another team in this course) as experts using the template we provide. Again consider Nielsen\u2019s (1994) paradigm Discount Usability Engineering, as well as Nielsen's collection of information on Heuristic Evaluations. Details can be found in Nielsen's (1993, chapter 5.11). Further reading Guerrilla HCI: Using discount usability engineering to penetrate the intimidation barrier by Jacob Nielsen (1994), paper Heuristic Evaluation by Norman Nielsen Group, various online articles Severity Ratings for Usability Problems by Jakob Nielsen, online article Usability Engineering Chapter 5.11: Heuristic Evaluation by Jakob Nielsen, book chapter Interaction Design: beyond human-computer interaction by Sharp et al., book Templates Heuristic Evaluation template (based on Nielsen's 10 heuristics) Task 9 Deadline: Upload the evaluation report in a folder iteration-2/heuristic-evaluation in the GitHub master branch. Offer your evaluation and feedbacks to your partner group (another team in this course) to conduct the Task 14 Previous: HiFi Prototyping Next: Presentation M2 Next: Presentation M2 includeHTML(); "}, "pages/tasks/M2_hifiPrototyping.html": {"url": "pages/tasks/M2_hifiPrototyping.html", "title": "Implementation: HiFi Prototyping", "content": " IPP Implementation: HiFi Prototyping Create a prototype with the software POP - Prototyping on Paper with more details and interactions based on the define functional requirement in the UML in Task 6 and the improved screens in Task 7. This prototype will be regarded as the \"hi-fi paper prototype\", which includes most of the design features and interaction concepts of the app. Task 8 Deadline: Upload your sharing URL of your POP prototype to a folder iteration-2/design in the GitHub master branch. Offer the POP prototype for your partner group (another team in this course) to conduct the Task 13. Previous: From LoFi to HiFi Next: Heuristic Evaluation Next: Heuristic Evaluation includeHTML(); "}, "pages/tasks/M2_presentation.html": {"url": "pages/tasks/M2_presentation.html", "title": "Presentation M2", "content": " IPP Presentation M2 Prepare a short presentation on your approach and the corresponding results in the second iteration, including reflections based on the evaluation result. You will demonstrate your methodological findings and your hi-fi paper prototype in 20 minutes (10 minutes presentation and 10 minutes discussion). Please ensure that your presentation does not exceed the alloted time! Don\u2019t necessarily proceed task-by-task, but rather tell a methodological story (why have you chosen certain methods, techniques or tools). Demonstrate the work in progress and formulate questions, you can discuss with the experts in the plenary. Task 10 Exchange the evaluation results between the evaluator and the evaluatee, upload your presentation (.ppt or .pdf) to a folder iteration-2/presentation the GitHub master branch. Previous: Heuristic Evaluation Next: Frameworks Next: Frameworks includeHTML(); "}, "pages/tasks/M3_frameworks.html": {"url": "pages/tasks/M3_frameworks.html", "title": "Analysis: Frameworks", "content": " IPP Analysis: Frameworks Guidelines Guidelines generally do not list any context nor specific problem and seem to be a general truth. A guideline is a record of an insight that can be used to guide future design efforts (Schneiderman & Plaisant, 2010, p. 75). Guidelines in general tend to be more specific about the implementation of solutions than design patterns. Some of the most widely known and used guidelines are the iOS and Android's Material Design guideline. It may be tempting to base your choice of design guideline on assumptions about your users. Headlines like \"What kind of user prefers an iPhone?\" suggest there might be fundamental differences. However, academic research is inconclusive. There are some studies finding that users vary in personality traits (e.g. Shaw et al., 2016, Ubhi et al., 2017), whereas other studies with large sample sizes found no significant differences (e.g. G\u00f6tz et al., 2017) Tips: Be precise! Make sure to really follow your chosen framework Reasonably explain deviations from the framework Further reading Chapter 7: From Requirements to Design: The Framework and Refinement by Cooper (2007), book chapter in About Face 3 Material Design by Google Human Interface Guidelines by Apple How To Create a Style Guide From Scratch. Tips and Tricks by Andrei Dorin, online article Choosing a framework for your app There are two ways for you to determine the design language/framework you can use in your app. You can use a predefined styleguide or you can define your own style. Where both approaches have advantages and disadvantages alike, it is your task to make an educated choice and document it properly. The choice of framework/design language strongly influences the interaction patterns your app is going to employ. While we do not require you to use any framework at all, we strongly suggest you use one. Choice of framework is up to you, however a flexible candidate, that incorporates material design, iOS guidelines as well as customization options is Framework 7. When choosing to follow a predefined design language, be precise and make sure to really follow it. Deviations from a chosen language have to be explained reasonably and the observance of your chosen style will be considered during grading. (Some) Strengths and pitfalls Material Design \u00a9 Lonely Traveler, IPP SS17 subtle skeuomorphism simplified physics to support intuitive user understanding dark themes available strongly associated with Google and android devices animations may not work for every user iOS \u00a9 HabbiApp, IPP WS16/17 highly consistent and recognizable visual language iPhone users spend more money on apps and in-app purchases strongly associated with iPhone devices in Germany, iOS only holds 35% of the OS market share Customized design language \u00a9 Skillers, IPP WS16/17 visual language to perfectly suit your app not associated with any other platform or existing app additional work to design new design language not build on several years of user tests and rework Templates Framework 7 Style guide template for Adobe XD by Tyler Wain Style guide template for Figma by SaaS Design Task 11 Discuss your considerations and decisions with your programming tutor. Document your decision process and why you chose which design language on not more than one page in iteration-3/analysis in the GitHub master branch. Previous: Presentation M2 Next: Style a prototype Next: Style a prototype includeHTML(); "}, "pages/tasks/M3_lofiWeb.html": {"url": "pages/tasks/M3_lofiWeb.html", "title": "Implementation: LoFi Web App", "content": " IPP Implementation: LoFi Web App Transfer the early stage prototype views to a prototypical lo-fi HTML/CSS/JS application. Focus on the prototypical views of your early stage prototype, add interaction for switching the views (not too much functionality yet). Ensure that you still apply the design (or usability) principles! Add all views you need for matching your scenarios and requirements. Use CSS/JS frameworks as necessary Add style sheets and scripts as external files. Comment them! Test the mobile usage of different application views. By using the phone emulator in Google Chrome. On your smartphones using GitHub.io Task 13 Store your web app in a (public) folder v3 in the GitHub gh-pages branch. Previous: Style a prototype Next: Qualitative Evaluation Next: Qualitative Evaluation includeHTML(); "}, "pages/tasks/M3_presentation.html": {"url": "pages/tasks/M3_presentation.html", "title": "Presentation M3", "content": " IPP Presentation M3 You will present your approach and findings, and demonstate your app (15 min presentation + 5 min discussion) during the next Interaction Prototyping session. Prepare a short presentation on your approach based on the documentations/reports. Demonstrate the work in progress (i.e. your prototype) and formulate questions, you can discuss with the experts in the plenary. Task 15 Upload your presentation (.ppt or .pdf) to a folder iteration-3/presentation the GitHub master branch. Bring your smartphone for the presentation (we'll connect it to a screen), ensure that your web app is available in the (public) folder v3 in the GitHub gh-pages branch. Previous: Qualitative Evaluation Next: Reflections Next: Reflections includeHTML(); "}, "pages/tasks/M3_qualitative.html": {"url": "pages/tasks/M3_qualitative.html", "title": "Evaluation: Qualitative Evaluation", "content": " IPP Evaluation: Qualitative Evaluation Some methods to gather qualitative data are: Interviews Focus Groups Diary studies Surveys These methods should all sound familiar to you, as they were discussed in iteration 1 and in the Analysis section. Feel free to revisit that content if you want to! Tips on how to make the most out of your qualitative evaluation Ask the right questions Make sure you ask all the most crucial questions or get all the important answers. Also, in case you are conducting an interview, you may have a list of other less relevant questions to ask if there is time left in an interview. Keep the questions open-ended and bias-free. You don't want to push the participant in any direction, you want an honest evaluation of your idea. If you feel that it's hard purposefully phrasing questions that way, write them down in full sentences beforehand. Take notes efficiently Take note of any direct mention of keywords that are relevant to the prototype or discussions you had in the team. It's always good to have some direct quotes for the evaluation report. Highlight them, e.g. with \u201c...\u201d, to make sure you and your team members recognize them as direct quotes when summarizing and writing the report. Write down anything surprising that does not meet expectation. Don't only think of comments, try to also observe the emotional and non-verbal reaction to certain parts of your prototype. Make sure you don't miss anything important. Don\u2019t be afraid to ask a participant to clarify a statement, if the evaluation takes place with e.g. an interviewer. Additional questions can make an otherwise unusable statement much clearer. Also, don't be afraid to simply ask \"Why?\". Remind yourself that understanding the participant's view on your prototype is what matters most! If the participants asks you directly about a feature of your prototype, take the opportunity to not answer straight away but to answer with another question \"Would you appreciate to have that feature?\"/\"What do you expect to happen if you were to press that button?\". Afterwards, you can of course give the participant a clear answer about how you envisioned the prototype to work. It can be quite helpful to record participant\u2019s voice and/or behavior. That way, you can for example focus on just asking questions and observing non-verbal cues and write down the participant's comments later with the help of the recording. Alternatively, you can also just record in case your notes are not enough to understand an issue and you and your team want to revisit the context of a statement. Evaluating your prototype In this iteration, conduct a qualitative evaluation of your prototype (either the web app or the visual prototype, you decide which to pick!) with 2-5 participants based on your user scenarios and test cases. Define criteria for your evaluation. Document/record the test in a suitable way (photos, log, etc.). For inspiration, read Chapter 7 (\"Usability Assessment Methods beyond Testing\") in Nielsen (1993), or Chapter 4 (\"Evaluating Interface Designs\") in Shneiderman and Plaisant (2005). Write/draw a very brief evaluation report on 1 single page, summarizing the documented evaluation. Describe your evaluation approach in a schematic manner: include your test cases, participant pool, identified problems & suggestions, etc. as well as your interpretations. Further reading Designing the User Interface Chapter 4: Evaluating Interface Designs by Ben Shneiderman & Catherine Plaisant, book chapter Usability Engineering Chapter 7: Usability Assessment Methods beyond Testing by Jakob Nielsen, book chapter Task 14 Upload your evaluation report to a folder iteration-3/evaluation on the GitHub master branch. Previous: LoFi Web App Next: Presentation M3 Next: Presentation M3 includeHTML(); "}, "pages/tasks/M3_style_prototype.html": {"url": "pages/tasks/M3_style_prototype.html", "title": "Design: Style a prototype", "content": " IPP Design: Style a prototype Style a Prototype Script How do we style our prototype? In case you had design confused with aesthetics initially, this is the part where we get graphical. Graphic design tools are great for generating high resolution images and creating our own graphics and icons. Those tools can be used for designing sample screens. However it's not advisable to design screens with graphic design tools, if there are a lot of screens with recurring elements to design or if it's needed to implement interaction, for example for user testing. In these cases there are a variety of prototyping tools built exclusively for designing screens. There are templates of major guidelines to use elements from and results can typically be used for testing as well. If we need different colors that match well, there is an easy technique: just select the color you like and keep the hue value like it is. Then, you can play with the saturation and the brightness to create a color that matches the first one. Try it out! There are more aids we can use to create an appealing color scheme. Visit the website link below to learn all you need about colors for designing the user interface. Thanks for the attention and see you next time! Using the design language from Task 11, redesign your paper prototype accordingly. The obtained results should have a high graphical fidelity and resemble the goal for your final design. These screens can best be designed using graphical software like the ones presented in Task . Tools Tips & tricks for styling your prototype Look for templates of common UI elements and patterns Find inspiration looking at other public projects designed with the tool of your choice Not every detail has to be completely covered - include short texts to explain why option is not yet available Choosing colors In web design, the used color scheme is a so-called \"additive\" one. This means that by combining multiple colors, the resulting color is determined by adding up the wavelengths. This is reflected in the RGB and hex values, which are some of the most commonly used color systems in front-end programming. \"RGB\" stands for \"Red, Green, Blue\", those are the colors represented in the pixels on your screen. Each value for the three colors ranges from \"0,0,0\" (black) to \"255,255,255\" (white). Sometimes you will see a fourth value, which determines the transparency of the color. The hex color code simply results from transforming the RGB value into a hexadecimal value. Now, if you intend to pick amazing colors for your web app, it would be a good idea to visualize all colors systematically, e.g. in a color wheel, in order to make an educated decision about which colors to pick. The colors that you can typically see in a wheel like the one below will most likely just vary in their hue. Here are some approaches to determine appealing color combinations for your visual design: Monochrome Easy to find appealing color combination Try keeping the hue value as it is, increase saturation and decrease brightness. Example: Qatar Airways Complementary Opposite colors elicit high contrast Elements pop out and can be identified easily Contrast needs to be used in a meaningful way Example: Panicstudio TV Analogous Nearby colors have low contrast Good choice for banners and website backgrounds Example: Clear Todo App Triadic Playful color scheme To keep balance, choose one dominant and two accent colors Example: Superman logo Final few tips: If you need inspiration, explore color schemes in images of the physical world or venture out yourself and figure out which colors typically seem to \"go together\" in your environment or the surroundings your web app will be used in! Also, never forget to check accessibility criteria, e.g. does your font size and color make the text on your app readable enough? Further reading All you need to know about colors in UI Design by Christian Vizcarra, blog article Color in UI Design: A (Practical) Framework by Erik Kennedy, blog article Color Theory: Brief Guide For Designers by Tubik Studio, blog article Color tools Color wheel by Adobe, website Color calculator by sessionscollege, website Color palettes by coolors, website Task 12 Document at least 3 example screens following the new style as images in iteration-3/design in the GitHub master branch. Previous: Frameworks Next: LoFi Web App Next: LoFi Web App includeHTML(); "}, "pages/tasks/M4_hifiWeb.html": {"url": "pages/tasks/M4_hifiWeb.html", "title": "Implementation: HiFi Web App", "content": " IPP Implementation: HiFi Web App HiFi Web App Script When lo-fi prototyping is done and dusted, you have already worked out the major quirks of your application, it is time to go for a high-fidelity prototype. High fidelity prototyping can be done with different kinds of focus, for example on the design, the employed techniques or the user experience. And for each type of hifi prototype there's a bunch of dedicated tools that you can use. Since we are in an interaction prototyping course, you'll - you have guessed it - focus primarily on interaction. A great way to achieve and control interaction is by coding your prototype in html, css and javascript. While there are other applications out there as well that support this type of design, none gives you the complete freedom that you'll have with coding. An additional benefit is that you will learn the vocabulary of your programmers; an essential skill that'll come in handy later, if you decide to pursue a career in interaction design. But, of course, you will not have to code everything from scratch. While this is sometimes recommended to facilitate understanding, there are plenty of well-suited frameworks for it out there and if you want to implement certain features, the usage of APIs or \"application programming interfaces\", is inevitable. When you've mastered the art of API there are virtually no limits as to what information your application can display using already existing software and triggering certain events using commands such as GET, POST, PUT, PATCH or DELETE. Think of the API as kind of a middle man of information. Your app can get information from some other applications by using these special commands. And, of course, since nearly every company is interested in people using the services, there are plenty of APIs out there. If you search the web, you'll probably find a bunch of APIs, some very useful, others, well, not so much. But still, might be some fun! If you're thinking about implementing something more complex in your prototype, make sure to check whether there is an API out there that can help you. For example: using location or map services. By including some rather simple lines of code you can easily use google maps within your application. Granted, not all APIs are as well documented as this one, but if you check it out you'll see that you can do some pretty nifty stuff with just a few lines of code. So much for implementation practice, see you next time This time, you'll seamlessly upgrade your HTML lo-fi model to a hi-fi HTML application: If possible, get information for the data elements dynamically, e.g. using APIs. A list of web APIs is available on ProgrammableWeb. Link the data elements to functional elements (i.e. make your application dynamic). Implement the interaction. Implement the visual appearance to match your defined style (and the guidelines). Finalize your prototype to be deliverable and testable. Clean up your application code (HTML, CSS, JS) and check your comments concerning their understandability for the upcoming code review. Resources API ProgrammableWeb Public API Index API list Google APIs Task 18 Important: Ensure that you address all the grading criteria described in the expectations, requirements and grading section above. Notice: It is strongly recommended that you comment your code and make your code as understandable as possible for our review. However, the usability and functionality of the application has a higher priority than the readability of your code. Remember, this is about an interactive prototype. Store your web app in a (public) folder v4 in the GitHub gh-pages branch. Previous: Improving interactions Next: Quantitative Evaluation Next: Quantitative Evaluation includeHTML(); "}, "pages/tasks/M4_improving_interactions.html": {"url": "pages/tasks/M4_improving_interactions.html", "title": "Design: Improving interactions", "content": " IPP Design: Improving interactions Transfer Coopers interaction framework. Apply your definitions (including patterns/guidelines) above to the web technologies HTML5/CSS3/JS: First, model the prototypical structure/hierarchy (in HTML), the data elements (as JS objects), the functional elements and input methods (e.g. HTML5 forms, jQuery UI components, ...). Second, model a rough prototypical sketch of key path scenarios (e.g. navigating the hierarchy) using jQuery. Third, design the visual appearance of your application in reusable and hierarchical CSS3 classes. Previous: Reflections Next: HiFi Web App Next: HiFi Web App includeHTML(); "}, "pages/tasks/M4_presentation.html": {"url": "pages/tasks/M4_presentation.html", "title": "Presentation M4", "content": " IPP Presentation M4 Prepare a short presentation (15 min presentation + 5 min discussion) on your approach, which includes the demonstration of the final prototype and presentation of experiment design. Task 20 Bring the app, measuring equipment, questionnaires, etc. to the lecture. Be prepared to discuss your app and evaluation methods! Deadline Important Deadline: After the presentation, you still have to fine-tune and finalize your prototype based on the feedbacks. Afterwards, your GitHub repository will be freezed, and no change will be taken into the final evaluation. Tips: don't be demotivated by the imperfection of your prototype, it is still a prototype at this freezing point. For all team members, please move on and be consentrated on the final evaluation. Previous: Quantitative Evaluation Next: Final Evaluation Next: Final Evaluation includeHTML(); "}, "pages/tasks/M4_quantitative.html": {"url": "pages/tasks/M4_quantitative.html", "title": "Evaluation: Quantitative Evaluation", "content": " IPP Evaluation: Quantitative Evaluation Quantitative Evaluation Script now depending on the type of data that you gather we generally distinguish between qualitative and quantitative evaluations while qualitative evaluations as you can probably guess focus on qualitative data that is used to generate possibilities for improvement quantitative data is usually acquired to rea to rate a certain system's performance in the following we will dive in depth into quantitative evaluations everything regarding qualitative evaluation can be found on the website we have many possibilities of gathering quantitative data on this slide you can see an overview of quantitative metrics clustered in task-related error-related session-related and engagement-related metrics one simple example for the first one task-related is a measure of how long a user needs to achieve a task for the error-related metric we could measure how many mistakes the user makes while achieving the task a session related metric would be for example the time a user spends on different screens within the app and an example for engagement related tasks could be the number of users that an app has we can gather quantitative data from using questionnaires they are an easy way to gather a large number of data and as they are or should be standardized and validated they can be analyzed easier than qualitative data specifically by asking closed questions which means that we define the answer options we can interpret the data without much further processing but as you can imagine there are not only good things about questionnaires that said the questionnaire should be standardized and validated because if this is not the case we need experts to interpret the outcomes and even if a questionnaire meets the highest scientific standards we can never be certain that the study's participants gave honest answers if we do not have the possibility to use a standardized questionnaire to find answers to our questions we can design our own questionnaire but there are a few things to consider we should avoid suggestive questions otherwise we might influence the users we should also try to ask questions which are not too ambiguous by including units for response choices regarding frequencies furthermore answer choices should contain all relevant options or a choice called for example other another factor to keep in mind are the response biases they can occur depending on demographic or wording of questions some of the most common biases include the tendency to say yes or to say no or the tendency to give extreme or rather neutral answers another bias is that study participants could deny undesirable traits and behavior when giving answers also the order of the questions could affect the answers in various ways some ways to minimize those biases are avoid using emotionally charged words assure anonymity of the participants prevent participants from becoming bored by not making questioners too long show progress tracker or make the question or questions formats rich in variety in summary as you can see designing your own questionnaire is rather cumbersome that is why we suggest that you use standard questionnaires if possible for different constructs we want to investigate we can use different questionnaires here you can find a few examples we suggest that you take a look into the different measures so you get an overview and an idea which questionnaires you can could use for evaluating your prototype in this course thanks for the attention see you next time. Experimental requirements: Hypotheses, test cases and metrics Read chapter six (\"Usability Testing\") in Nielsen's Usability Engineering (1993). Prepare requirements for a quantitative and summative evaluation. Hypotheses State goals and derive hypotheses that you want to test (e.g. \"completing task x with the prototype is faster than with off-the-shelf software\", \"the prototype achieves at least a rating of x\", \"the performance for fulfilling the task will be x %\" etc.). The hypotheses should be in line with your functional and usability requirements. A good introduction on creating theories and deriving hypotheses is given in Field (2009). You must be able to explain, why you chose a certain hypothesis (including any predefined values). The easiest way to do so is by referencing relevant literature. Test cases Derive the test cases (tasks), from your use cases. Subjects will need to fulfill the test cases in order to reject/prove your hypotheses (some hints on test scenarios are given on usability.gov). Metrics Nielsen's (2012) post on User Satisfaction vs. Performance Metrics and refer to \"Performance Measurement\" (Nielsen, 1993, chapter 6.7). Define objective measures (obtained by logging parameters) such as reaction time, time to perform a task, number of errors, number of interaction steps, etc. Additionally, define subjective measures. Design or use an existing short questionnaire that uses scales to analyze the product (a list of questionnaires can be found on usabilitynet.org, another list of usability and user experience surveys is available from unige.ch, further questionnaires can be found on measuringu.com). Experimental design: Plan and prepare a quantitative (summative) evaluation Please operationalize your hypothesis using the metrics. Define quantitative criteria for assessing your prototype subjectively and objectively. Prepare the experimental setup for your summative evaluation. Design the experimental procedure. Setup the data acquisition (direct in-app logging, observation, record, ...). Test the setup, procedure and data acquisition. Further reading Usability Engineering Chapter 6: Usability Testing by Jakob Nielsen, book chapter Discovering statistics using IBM SPSS statistics by Andy Field, book Mobile Device Testing by usability.gov, online article User Satisfaction vs. Performance Metrics by Jakob Nielsen, online article Questionnaires Usability and user experience surveys by edutech wiki, website Various UX questionnaires by MeasuringU, website SUS by Brooke (1996) ISO 9241-10 by Pr\u00fcmper (1997) AttrakDiff 2 by Hassenzahl, Burmester & Koller (2003) UEQ by Schrepp, Hinderks & Thomaschewski (2017) Emotrack by Garcia & Hammond (2016) LEMtool by Huisman et al. (2013) Task 19 Summarize hypotheses, test cases and metrics in a brief report in the folder iteration-4/preparation on the GitHub master branch. Upload a photo of the setup, as well as a brief listing of the quantitative criteria and the procedure to a folder iteration-4/preparation on the GitHub master branch. Previous: HiFi Web App Next: Presentation M4 Next: Presentation M4 includeHTML(); "}, "pages/tasks/M4_reflections.html": {"url": "pages/tasks/M4_reflections.html", "title": "Analysis: Reflections", "content": " IPP Analysis: Reflections Analyse the results of the qualitative evaluation in iteration 3, work out positive points to keep working on and the negative points to be improved. Compare those Todos with the planned goal of your application, decide what are exactly to be implemented/improved. Task 16 Document your decision process briefly on not more than one page in iteration-4/analysis in the GitHub master branch. Previous: Presentation M3 Next: Improving interactions Next: Improving interactions includeHTML(); "}, "pages/tasks/M5_evaluation.html": {"url": "pages/tasks/M5_evaluation.html", "title": "Final Evaluation", "content": " IPP Final Evaluation Evaluation: Data collection for the quantitative evaluation Collect data from at least 10 persons depicting your target group (relatives, friends, fellow students, etc.). Store the acquired data in a suitable manner. Analysis: Statistical analysis of the quantitative evaluation Please format your data for analysis in the statistical tool of your choice (Excel/JMP/R/SPSS). SPSS is available on computers located in the ergonomics department (LfE). To create an LfE account, required to use the LfE computers, contact the LfE Technical Support Team. Perform a statistical analysis and reject or accept your hypothesis (a good overview on statistical analyses is given in Field, 2009). Make sure you check the assumptions of the tests before using them. Express the results in the best way for the audience of your final presentation. Use APA 7-style diagrams (or tables) for this purpose and interpret your results with regards to your hypotheses and functional as well as usability requirements. Include your results' implications for your design. Further reading APA 7 Basics Tutorial by APA Style, website Discovering Statistics using SPSS by Andy Fields, book Task 21 Upload the data set to a folder final_evaluation/data in the GitHub master branch. Upload the analysis in a folder final_evaluation/analysis in the GitHub master branch. Previous: Presentation M4 Next: Final Presentation Next: Final Presentation includeHTML(); "}, "pages/tasks/M5_presentation.html": {"url": "pages/tasks/M5_presentation.html", "title": "Final Presentation", "content": " IPP Final Presentation Please prepare a presentation for the final presentation, which should include the whole methodological prototyping process that you used. Design the presentation for new stakeholders (i.e. usability experts, evaluators, professors, ...) that do not know your methodological process yet. Focus on the iterative user centered design process. It is important to motivate the evaluation methods, the results, as well as design improvements. Provide both an overview (all the methodological steps) and some highlights (details on chosen techniques/tools, important results, well-chosen design improvements). Your presentation should contain: motivations both for the application and the iterations (users, goals, requirements, ...) an overview of your process iterations (used methods, prototyping tools, evaluations, final application views) well chosen exemplary details regarding evaluation results and design improvements discussions/conclusions of the iterations During the presentation (exactly 15 minutes!) you will give a short explanation of your overall work (10 minutes) and demonstrate the mobile application (5 minutes). Ensure that each group member presents. Be prepared to answer additional questions afterwards (approx. 5 minutes). Grading Ensure that you address all the methodological grading criteria described in the Expectations section. Creative Presentation designs and styles are highly encouraged. The only requirement are the TUM-Logo in the top right corner of the presentation as well as slide-numbers (for an easier discussion). Apply the APA 7 guidelines for formatting figures, tables, and statistics (a summarized styleguide can be found on the institute's website). But keep in mind, that you're going to present an iterative process, so you need to transform the common (APA 7) structure (\"introduction\", \"method\", \"results\", \"discussion\", \"conclusion\"). Altogether, you need to combine the scientific and the iterative design process to present your methods and results. Further reading APA 7 Tutorials by APA Style, website Styleguide f\u00fcr Studienarbeiten by TUM Task 22 Upload your presentation (.pdf) to a folder iteration-5/presentation the GitHub master branch. Bring your smartphone for the presentation ensure that the latest version of your web app is available in the (public) folder v5 in the GitHub gh-pages branch. It might be helpful to create backup slides with the documents/reports created during the analysis, design and evaluation phases as supplementary material for questions emerging during your presentation. Previous: Final Evaluation includeHTML(); "}, "pages/theory/analysis.html": {"url": "pages/theory/analysis.html", "title": "Analysis", "content": " IPP Analysis Before you judge users, walk a mile in their shoes Analysis Theory Script Hey, this is Simon and welcome to analysis theory! When we speak about user-centered design, we always speak of a process consisting of several steps. Here, you see this process is divided into the sections: plan, design, prototype and review, which is also called evaluation. In this lecture, we want to speak about the planning. When user-centered design is used in a professional context and when the aim of the process is to have a commercial product, one part of planning is analyzing the competition, but more important for us is the topic of defining user requirements. These requirements consist of our knowledge regarding the potential users, their goals and the environment in which our product shall be used in the future. Goal-directed design is a user-centered methodology which incorporates six steps. It contains talking to users, analyzing what they say and finding out whether one user interface manages to satisfy all user groups or if it is necessary to design different interfaces. The research phase consists of interviewing stakeholders and users. During this phase it is not unusual to conduct a literature review as well. The collected information can then be clustered for modeling, which leads to personas and to workflows. Personas represent archetypal users and workflows describe what users do when interacting with a product and in what sequence. This knowledge helps us to define the requirements, which describe which details and information users need and which functional needs they have for interacting with the product. The step of framework definition consists of determining form factors and a visual language strategy. We might develop strategies for more than one interface thus one for each persona depending on how different their requirements are. In the design and development phase, the detailed design and interaction behavior is specified, which can be then developed or coded but these aren't part of the analysis. In the planning section of the user-centered design process, we analyze our potential users, therefore, our target group. We can ask ourselves questions like \"How old will the users most probably be?\" \"Are they versed in the interaction with technological systems?\" and so on. When we have gathered all the information we need, we can cluster this information to build personas, which are personalized representations of our different target groups. Equally important to the understanding of our users is the understanding of their intentions. Only if we know what the users want to achieve by using our system, we are able to help them achieve their goals. Additionally, it is essential to know how our users interact with a specific kind of system and how they wish they could interact with a specific kind of system. When we have insights about their preferred kind of interaction, we are able to take this knowledge into account when we design the system. Last but not least we have to consider the environment in which our system will most probably be used. It could be that we develop an intuitive system which is very usable in one environment, but totally unusable in another. Thus, we collect knowledge to avoid mistakes like this. By saying \"environment\" we do not only mean the physical but also the social context. For example, being alone or being in an environment, where other people are, can lead to a change in the requirements. Thinking of what i just said, it seems logical that analysis is the basis of the entire human-centered design process. If we have false assumptions about the users, their goals or the context, we might make mistakes in the following process steps. But don't worry, as you can see here, the design process is depicted as a spiral. This means, if you notice inconsistencies which emerge from mistakes in an earlier step, you can make it better in the next round. You see, the human-centered design process is iterative. You go through all the process steps several times until the evaluation gives you the impression that your system serves its purpose and is usable for your target group within the environment it will be used. Knowledge about how users think and what they expect from interacting with a system helps us design adequate solutions. The representation of what people know and expect is called a mental model. By interacting with, for example, a specific computer program, a person generates a representation of the system. This representation consists of facts and assumptions which could be true or false. Nonetheless, based on experience this person now has an internal construction of the computer program, which in turn affects his or her expectations towards it or similar types of programs. The way of interacting is also part of a mental model. If a person has no experience with a program, this person still might have expectations on how the interaction could be. These expectations could be shaped by other people's stories or past interactions with similar systems. Most importantly, mental models are prone to changes, so if people have an incorrect mental model regarding a system before interacting with the same, the mental model changes while interacting. So, good news, users can learn to interact with a product and the success is not only dependent on the first contact! Sometimes, the human machine interface is oriented towards the implementation model, which means that the user interface follows the logical structure of the program and not the structure users might expect from the system, which can impede the usage and consequently lead to users being unable to achieve their goals. By understanding mental models regarding systems and system interactions, we can adapt our product to the expectations users have and therefore ensure successful human computer interaction. Otherwise we might have the case that the designer naturally understands the interface, since it corresponds to his mental model, but our users have problems understanding the design due to their lower knowledge regarding the product. As already mentioned, representations in a mental model are not always correct. This is the case because they are often based on incomplete facts, past experiences or intuitive perceptions. As you can imagine, all those sources for building up a mental model are not always consistent with objective reality. These mental models formed by different, not a hundred percent reliable sources have an effect on a user's actions and behavior and also influence what people pay attention to in complicated situations. Since they are partly based on experience and experience influences our way of perceiving, as well as our actions, mental models also define how people approach and solve problems. It is not important that the mental models are 100 percent accurate and contain everything concerning a system. They only have to contain what users need for a successful usage and therefore it is a simplification of a possible complex product. Our task is to build the interface in accordance to the user's mental models or at least shape the mental models during interaction that the usage is satisfactory for the user. Here, you can see some shapes. The shape to the very left, it's a square, represents the implementation model which reflects the technology, for example, the logic a program is based upon. The shape to the very right, the circle, represents the mental model reflecting the user's knowledge about and expectations towards the system. The three shapes in the middle are possible represented models, also called conceptual models or system images. One of those shapes is the one the user can see, the represented model is what the user sees and interacts with through the human machine interface or graphical user interface. Logically, the more similar the represented model is to the mental model, the less the discrepancies between users assumptions or expectations and the reality, therefore, the better. Thanks for the attention and see you next time! Goal-directed design What the Goal-Directed Design process does is provide a problem knowing process. What problem are you solving and what are the salient parts of the problem? What is really critical? Mental Models Mental models can be discovered by interviewing potential users applying the Thinking-Aloud technique, as you will do for an assignment in iteration 1. Further reading \"Inside Goal-Directed Design: A Two-Part Conversation With Alan Cooper\" by Caroline Kraus, interview \"Mental Models\" by Jakob Nielsen, online article \"6 Examples of Context of Use\" by John Spacey, online article Overview Analysis tasks We will take a closer look at analyzing for several tasks. Feel free to already discover more about the methods: Iteration 1: Research and interviews Iteration 2: Goals and design principles Iteration 3: Frameworks Iteration 4: Reflections Previous: Setup Development environment Next: Design Next: Design includeHTML(); "}, "pages/theory/design.html": {"url": "pages/theory/design.html", "title": "Design", "content": " IPP Design Visualize your idea and your thinking Interaction Design Script Hi, this is Simon and welcome to design theory! Now it gets really interesting! We have analyzed our users, their goals and their environment and can finally get to designing our product. We will now speak about Interaction Design. This kind of designing focuses on form and on - this is important - behavior, since otherwise it would not be interaction design. It is like social interaction, it does not really work if only one person takes actions and the counterpart shows no reactions. When we want to achieve interaction design our system has to show a certain type of behavior depending on the actions of the human agent. Since we speak about design a lot here, you might wonder why it is even considered as important. I hope that this will be clear after this lesson. Well, we should start designing before we start implementing, otherwise we might make the mistake of implementing something that's based on user needs but can't help them achieve their goals due to a bad user interface. If you're working in a team you should use the opportunity to communicate your design ideas in order to find flaws in your visual concept or to come up with new ideas. As i said, designing should happen before implementing and therefore it comes after analyzing the target group and the usage context. It is also a good idea to evaluate the design before you start implementing it. This picture shows the human machine interaction model. The human operator receives a task by means of the sensory organs, processes the task and decides which input is necessary to solve this task. The agent's output leads to an input to the machine through the human machine interface. The machine then displays the results of the human machine interaction which in turn the agent perceives. This can lead to further inputs into the machine until the displayed output corresponds to the desired result and all this is essentially a very convoluted way of saying, if you press a certain key on your keyboard for example, the output appears on your screen. As you most probably know, humans possess several sensors, but only a few of them can be used for interacting with the human machine interface. These are hearing, seeing and touching. All interfaces you come across today rely on those senses. Knowing this is helpful when you are designing your interface, because it shows you the possibilities you have. Of course, there are exceptions, Wii balance board for example. But unless you want to get really creative, sticking to ears, eyes and hands is a safe bet. When it comes to the question which senses we should address while creating an interface, we should keep these five recommendations in mind. First, it is always advisable to distribute information over multi-modal interfaces, which means that the human machine interaction is not only restricted to one sensory modality. Furthermore, the modality should be linked to an action for instance if you hear this: *ping* Most of you will instantly know that there is an iPhone user who received a message. Especially when you need the user's attention, multi-modality is critical. Users are busy people and important messages can easily get lost if only presented in one domain. This is why notifications on your phone for example show up via sound vibration and as well as visual display. This escalation of modalities also conveys urgency and importance. If you want to make sure something is received, it is always good to use information channels that are less busy at the moment. So if someone is talking or listening, go for visual to capture the attention. Now that we have the user's attention, we want them to do something, for example click a button. Fitt's law describes how long it takes to point at a target. The law is not only applicable to the physical world but also to virtual interaction. It is a function showing that a movement takes longer the longer the distance to the target and the smaller the target is. This means that we have to consider how big we design our targets and where we place them in order to avoid unnecessary movement times. For example for workflow issues, related targets should be placed closer together. A special case of Fitt's law are edges and corners of the screen. The size of the area to hit is massive, as with a typical computer screen the mouse cannot go over the edges. This is why important actions, for example closing a window, are usually placed somewhere in the corner. When we know how long users will take to reach the target, it is important to take a look at the target selection times. The difficulty and speed of selecting a response or an action is influenced by several variables, of which five are particularly critical for system design: decision complexity, expectancy, compatibility, the speed-accuracy trade-off and feedback. However, systems requiring users to make simpler decisions are not always superior. If a given amount of information needs to be transmitted by the user, it is generally more efficient to do so by a smaller number of complex decisions, which is called decision-complexity advantage. This is why typists can convey messages faster than morse code operators. Although keystrokes are made slower, they are fewer. Our working memory is limited, which explains the prior insight that more options can lead to longer reaction times. The magical number you should remember is 7 plus minus 2, because not everyone's working memory has the same capacity. When you look at these numbers, which way of displaying them is better, the left or the right one? Okay, i give you the solution. It is the right one. Several numbers are put together to one chunk and, therefore, we only have three chunks on the right, while on the left every single digit has to be considered as own chunk. There are three responses to a piece of design\u2013 yes, no, and WOW! Wow is the one to aim for. Further reading Interaction Design Basics by usability.gov, online article 10 amazing examples of interaction design by Emily Esposito, online article Usability Usability Script Now we come to the usability of interactional interfaces. I think this term is known to the most of you, but let\u2019s take a deeper look into the construct together. Usability is defined as the extent to which a product can be used by specified users to achieve specified goals with effectiveness, efficiency, and satisfaction in a specified context of use. As you can see, usability depends on factors we already have taken into account in our analysis. We spoke about the users or our target group, their goals and their context of use. To achieve usability, we have to merge our insights and design a product which allows effective, efficient and satisfactory interaction. Here you can see another definition of usability by Nielsen. Usability consists of different aspects, such as learnability, which indicates how easy the accomplishment of basic tasks is for first-time users encountering the design, efficiency, which is connected to the question how fast users can perform a task and memorability, which means the ease of re-establishing proficiency of users returning to the design after a period of non-using. Furthermore, we have to take the errors into account, which users make, with regard to the amount and severity to evaluate usability, as well as the satisfaction and pleasantness the usage evokes. Usability und utility are both important constructs and therefore it is even more important to be able to differentiate between those terms. Our product can be considered as utile, when it provides the functions, the users need, while usability describes how satisfactorily, efficiently and effectively the product can be used. Therefore, usefulness, which we hope to achieve, is the combination of how usable and how utile a product is. You might wonder why usefulness is also dependent on usability and not only utility, which describes, if users would need the product. Well, without usability, it could happen that nobody wants to use our product, and a product which is not used, cannot be useful. Usability is associated with the productivity of users and can increase the sales of a product, since good usability leads to positive emotions such as joy. We should think about usability at least after each iteration but actually we should take usability into account in every step of the design process as it plays a role everywhere. The resulting need for multiple studies is one reason we recommend making individual studies fast and cheap. Here are the main steps: Before starting the new design, test the old design to identify the good parts that you should keep or emphasize, and the bad parts that give users trouble. Conduct a field study to see how users behave in their natural habitat. Afterwards make paper prototypes of one or more new design ideas and test them. The less time you invest in these design ideas the better, because you'll need to change them all based on the test results. Then you can refine the design ideas that were rated best through multiple iterations, gradually moving from low-fidelity prototyping to high-fidelity representations that run on the computer. You should also inspect the design relative to established usability guidelines whether from your own earlier studies or published research. Once you decide on and implement the final design, test it again as subtle usability problems always creep in during implementation. Remember mental models from the Analysis section? They actually are very closely tied to the concept of usability. The way a user interface is designed and how it works should match the natural mental models of users, which represents one aspect of a product having \u201cgood usability\u201d. To make sure your software does not confuse users and it works as they expect, you need to actively work towards narrowing the gap between user\u2019s expectation and the way your product actually works. Usability rules the Web. Simply stated, if the customer can't find a product, then he or she will not buy it. User Experience User Experience Script Now that we made sure users can and want to use our product, it is time to think about how we can make them love to use our product. User experience concerns the whole experience users have while using a product, service or even institution. This construct is, in comparison to usability, not restricted to an interaction and its ease, but also to expectations towards usage and behavior before, during and after usage. Usability contributes to user experience and hence it is a product construct. Now, let's get to mental models again. I hope you remember the construct from the analysis section. As explained, mental models consist of people's experiences, expectations and knowledge and, as i said on the last slide, user experience can be influenced by the expectations. Therefore, it should not be hard to see that user experience and mental models are somehow associated. I mentioned this before, but you really should be able to distinguish user experience and usability. Usability evaluation focuses on how well users can learn and use a product to achieve their goals. It also refers to how satisfied users are with the process. User experience (UX) focuses on having a deep understanding of users, what they need, what they value, their abilities and also their limitations. It also takes into account the business goals and objectives of the group managing the project. UX best practices promote improving the quality of users interaction with and perceptions of our product and any related services. User experience means the experience the product creates for the people who use it in the real world. As I already said, the experiences before, during and after the usage of a product have influence on UX. Well, the usability is associated with the feelings and experiences users have during the usage. In this graphic you can see that usability is part of user experience. So, UX is depending on the expectations towards the usage and the processing of a past usage, which can for example lead to an emotional binding to the product. Here, you can see some example questions for investigating user experience. These ask for example about the probability a user would recommend a product or if the users feel good about the product and themselves after the usage. We will get to this again in the evaluation chapter but these questions should give you a first idea. This honeycomb shows us the keywords regarding user experience. To achieve UX, information has to be useful, which means the content should be original and fulfill a need. Usable, which means the interface has to be easy to use. Furthermore, the product should be desirable, so the design and the brand should evoke positive emotions in the users. Information also has to be findable and the content has to be accessible for people with disabilities. Last but not least information has to be credible, so the users must be able to trust and believe what we will tell them. All those aspects regarding the information ensure that the user experience is valuable. To give an example of the fact that usability is not the only factor relevant for success, I will now show you two websites that have more or less the same functionality. However, which of these two would you find more credible for medical advice? This one: or this one: Perceived credibility consists of the constructs perceived trustworthiness, which means that the content is fair and unbiased, and perceived expertise, which means the product conveys knowledge, skill and experience. Now, you can ask yourself again which website you find more credible and even more important and why. For further insights into the topic of credibility on the web, we recommend visiting this website: Further reading The 20 UX tips you need to know by Jamie Shanks, online article Processing Levels Processing Levels Script If we are talking about interaction, it is crucial to also talk about the depth in which interaction takes place. For this reason, let's go to the theory of processing levels. There are three levels of processing for a user. The visceral level is associated with the limbic system and concerns for example emotions and rapid judgments. The behavioral level consists of experiences that are not consciously processed other than the reflective level, on which conscious processing, interpretation and - yeah, you might have expected that - reflection happens. This means that there is more than effect and behavioral experiences, but also reasoning. The designer can alter utility and appearance of a product as a means to influence these three levels. Based on the information from the preceding slide, we now know how to interpret these terms: visceral design, behavioral design and reflective design. The first refers to the appearance which has an influence on the rapid judgments of a system and therefore, the effect. The second one refers to the pleasure and effectiveness of usage, which strongly sounds like usability, am i right? So, the behavioral design is perceived by interacting with the system. The reflecting design addresses the feeling users might have after the usage and, more important, the memories. Are they positive? Moreover, does the usage promote our self-image? For example, because the product is on vogue and we want to be on vogue? What do you think about this product? Maybe not everybody agrees on this, but this tool could be rather called beautiful than usable. Therefore it is something for the hallway, not for the kitchen. As you might have thought by now, this is visceral design. This car is, at least according to the advertisement, built for pleasure. In the development process, the designers focused on the effectiveness of use. Therefore, we can associate this product to the behavioral design category. What do you think about people driving this car? Maybe you think they are show-offs or maybe you are impressed. One way or another, you most likely will think something about the owner. This product was built to contribute to the self-image, personal satisfaction and memories of the user. Therefore, we classify this product as reflective design. Thanks for the attention and, see you next time. Overview Design tasks We will take a closer look at designing for several tasks. Feel free to already discover more about the methods: Iteration 1: First sketch Iteration 2: From LoFi to HiFi Iteration 3: Style a prototype Iteration 4: Improving interactions Previous: Analysis Next: Implementation Next: Implementation includeHTML(); "}, "pages/theory/implementation.html": {"url": "pages/theory/implementation.html", "title": "Implementation", "content": " IPP Implementation Bring your idea to life! Implementation Basics and Process Script Hi, it's Simon and welcome to Implementation Theory. Let\u2019s get to the theory part of the practice section: the theory of implementation. And yes, there is actually some theory involved in this one. When do we start implementing you might ask. Well, we can only implement something if we already have thought about what to implement and therefore we can start with it only after actually designing our app. Best would be, if we also would have evaluated the first draft of our design before implementing it, since this way we can avoid major errors. Now you might rightfully ask, but how can we evaluate something that is not implemented? Well, first off there are some methods of evaluation that do not actually need an implemented prototype (see chapter evaluation), but secondly - and this one is important to remember - if we speak of implementation, we do not necessarily mean actual coding. What is the reason for implementation in the prototyping process? When we have our idea and the design, we should try to experience in some way what we thought of as a prototype. Thus, it gets easier to come up with what is good and what is bad about the design. It helps improve our idea, the design and the prototype itself, as we can generate new ideas, which would then lead to iteration on the idea or the design and finally the prototype. Only If one can truly experience something - and this is mostly possible with implemented solutions - you can truly learn how your users will interact with the product. Well, on the last slide we more or less covered the positive aspects of prototyping. But do also negative aspects come along with this step in our process? No, not really, we should be careful though, since there are a few traps we could fall in. We should be careful, that the implementation of our prototype does not take too long, as this could be very cost-intensive and time-consuming. This could also lead to a too strong attachment to the prototype, which could then result in blind spots regarding the evaluation. Another aspect, which should never be neglected, when showing potential users our first prototype is, that they might confuse this work in progress product with the end product and consequently evaluate aspects which are associated with the state of progress status and therefore are not relevant for us. As you might have imagined, there are different possibilities and ways of prototyping. Let\u2019s now get to physical prototyping. As we can see here in this image, there are different ways of prototyping. Horizontal prototyping aims at displaying various features of the prototype without implementing all the functionalities of the different features. On the other hand, vertical prototyping means the exemplary implementation of the functionalities of one or only few features. With horizontal prototyping, it easier to show how the complete product is designed and which relations between those functions exist. By choosing the vertical way, it is possible to look deeper into a complex feature, helping understanding it, for example by means of a proof of concept. On this slide, you can see a typical prototyping process. Or rather the way it would look like if not depicted in a spiral like the model you follow in this course. You can see two prototypes which should represent the iterative nature of this process. After analyzing the requirements,designing the first draft of the product and evaluating it, the whole process can begin again until the evaluation leads to a satisfactory outcome. Before we can start prototyping, we have to decide on one prototyping process: we can use the rapid prototyping method or the evolutionary method. Where rapid prototyping focuses on stepping up the pace and beginning each prototype from scratch. Evolutionary prototyping focuses on gradually improving your prototype through either incremental changes or tests with extreme features. This way you can see what works and keep it. Everything else is discarded. Our decision depends on whether we want to see quick results and visualize our ideas or if the prototype should be an evolutionary step into the direction of our final product. In the rapid prototyping process, we develop prototypes which can be tested and adapted quickly. This way, we can identify usability problems in an early stage of the development process and therefore reduce efforts in the high-fidelity design and implementation phase. Due to the fast prototyping, we can make more iterations which leads to more adaptations and hence, hopefully, to a better product. During the evolutionary prototyping process, the prototype evolves towards a final system. After designing and building the first prototype, it gets tested and refined until we have a functional system as a result. This means, that our prototype is not only built to test our ideas and the design, but also to really create the final product. The incremental prototyping model consists of the same steps as the evolutionary prototyping process, but the different functions of our product are prototyped separately and then merged. This has the benefit, that the process is flexible and the single prototypes are easier to test, as they are less complex. One disadvantage could emerge regarding the system architecture, because not all requirements are gathered up front for the entire software life cycle. On this slide you can see the extreme prototyping model, which is often used for developing web applications. It breaks development into three distinct phases: prototype, coding processes, and services implemented. It is called extreme because a fully functional UI is developed with little regard to the services other than their contract. The first phase is the static prototype, consisting of HTML pages and possibly a logical data model supporting those pages. The second phase is a coding process in your chosen web framework whereby the screens are fully functional using a simulated services layer. The third phase is where the services are implemented. Here is something you might have understood by now: Prototyping is iterating. We have ideas, sketch them, design a first draft of a prototype and then we evaluate it. Based on the input our evaluators give us and on the observations we make during the evaluation, we either generate new ideas and build a new prototype or we just refine the existing one. And we do this until we are satisfied with the outcome of an evaluation phase. Ideally. Or, more realistically speaking, until we run out of time. We can also differentiate between lo-fi and hi-fi prototypes. Lo-fi prototypes are for example sketches on a paper or in a software. These kinds of prototypes are helpful for brainstorming or guerilla testing. Hi-fi prototypes are created with either rapid prototyping or development tools. These take more effort to build, but in return, we are able to test for example the user interaction with these. Further reading \"UX Prototypes: Low Fidelity vs. High Fidelity\" by Kara Pernice, online article \"Rapid prototyping Google Glass - Tom Chi\" by TED-ed, video Prototyping Dimensions Prototyping Dimensions Script Let us now talk about prototyping dimensions. Here you can see the six dimensions of prototyping. It goes from the range of functions to the maturity of the prototype. On the next slides, we will say a few words to each of those dimensions. First, before we start building our prototype, we must ask ourselves which functions it should consist of. The answer to this question might be easier to find, if we know, which questions we try to address with the prototype. When the range of functions depicts the horizontal view, the functional depth represents the vertical view. Is it important for the prototype, that the functions, which help solving a task, are fully developed, or is it sufficient to simplify the steps? We already spoke about low fidelity prototypes. Here you can see sketches on paper or in a software. But as you can see, both are not very elaborated and not on a high design level. A high-fidelity prototype contains more details and is more realistic. But as you can imagine, building a hi-fi prototype is more expensive and time consuming than a lo-fi prototype. What do you think is prototyped in this picture? That\u2019s right, it is traffic. This goes to show that with the right tools and methods, you can prototype anything. Do you want to test the user interaction with your prototype? You could sketch static scenes of your future product, for example different screens of the different functions. Or you could let a test person \u201cfake interact\u201d with a prototype and in dependency of the participant\u2019s input show the next prototype sketch. Another thing to think about is how detailed the prototype shall be with regard to the information displayed. If we only want to see, if displaying text at a specific location works, we can use a placeholder. The same works for pictures. How mature shall the prototype be? Is there functioning technology in the prototype and have we invested time in correcting errors? Actually, the question we are asking here is, how close is the prototype to the final product. This can refer to all aspects, for example also to the platform the product will run on. Overview Implementation tasks We will take a closer look at implementation for several tasks. Feel free to already discover more about the methods: Iteration 1: Paper Prototyping Iteration 2: HiFi Prototyping Iteration 3: LoFi Web App Iteration 4: HiFi Web App Previous: Design Next: Evaluation Next: Evaluation includeHTML(); "}, "pages/theory/evaluation.html": {"url": "pages/theory/evaluation.html", "title": "Evaluation", "content": " IPP Evaluation Don\u2019t fall in love with your prototype Evaluation Theory Script Hi, this is Simon and welcome to evaluation theory! Now, finally we get to the evaluation you already heard so much about. When we have a prototype or a product, especially when it comes with a new design, we need to evaluate it. In most cases we think of the product as a kind of solution for one or several specific problems. In the evaluation phase we can find out if the product can help the users solving their problem, answering the question if the product is useful. Moreover, we want to know if the users like using the product or, in other words, if the product shows a good usability. We have already talked about it in the sections before, but here you can see again when we should evaluate our prototype, which is after the first implementation of an idea. The evaluation marks the end of a development cycle, but not necessarily the end of the development. We can use the insights from the evaluation to create new requirements and ideas or to enhance the design of the prototype. After those modifications, we should evaluate again to see if the changes have the desired effect. In general, we want to evaluate all the different constructs we have talked about, for example usability and utility. We also want to test if the prototype meets the quantitative and qualitative design criteria. One thing we should keep in mind is that not all prototypes are suitable for every evaluation method, so the method depends on the kind and the maturity stage of the prototype. DECIDE is a framework which helps guide an evaluation process. As you can see here, the initial letters of decide are also the initial letters of several rules applying to an evaluation process. During this process we have to ask ourselves which goals we have by evaluating. So, do we rather want to know if the design is appealing or if we understood the user's needs correctly? Exploring questions helps us operationalize these goals. The next question would be, which evaluation paradigm we choose to answer the questions, meaning we have to decide on which tools we want to use Practical issues could be resources we need or users which act as test persons. All these practical issues can have an impact on the conduct of the evaluation. Ethical issues on the other hand could be private data protection, which should be already considered while planning an evaluation. When we have evaluated and finally generated data, we have to analyze it and interpret it. The first two letters of DECIDE, the determination of the goals and exploring the questions, is dependent on the requirements of the project. Here you can see some example questions helping operationalizing the goal of the evaluation. Choosing the evaluation method depends on the stage of a project or the stage of the prototype. Naturally, the maturity of the prototype plays a role when deciding how to test it, since it is hard to conduct, for example, a user study containing interactions with the system if we do not have a concrete interaction design yet. On this slide, you can see the software release cycle map. It looks like a linear process but as you can see when looking at alpha and beta here we also have different prototype stages before we get into the release period When we decide which questions we want to answer by means of an evaluation, we should know the difference between quantitative and qualitative data. As the name already says, quantitative data give information on quantities, which means they are measurable. Quantitative data consist of numbers, for example measures of distances in meters or measures of time in seconds. Qualitative data are not measurable as they contain information about qualities. We can gather qualitative data by interviewing test persons, for example. To give you an idea: when the number of pages of a book is quantitative, a content summary would be qualitative. Formative evaluations should be conducted during the development phase, doing this we can verify against specifications. The summative evaluation on the contrary is a validation against the requirements. By the way, this is also how we divide the forms of evaluation you do in this course. Formative: the tasks you upload in github and summative: which is the final graded presentation. Here you can see the differentiation between formative and summative evaluation. The first one is conducted when the prototype is still in an early stage and we are still in the developing process, which means the goal of the evaluation is to gain insight into how to improve the prototype. A summative evaluation is conducted in a late project stage with an at least nearly finalized prototype. In this evaluation, we validate if the system meets the criteria defined in the requirement phase Thanks for the attention and see you next time. The goal of a designer is to listen, observe, understand, sympathize, empathize, synthesize, and glean insights that enable him or her to make the invisible visible. Overview Evaluation tasks We will take a closer look at evaluation for several tasks. Feel free to already discover more about the methods: Iteration 1: Thinking Aloud Iteration 2: Heuristic Evaluation Iteration 3: Qualitative Evaluation Iteration 4: Quantitative Evaluation Final Evaluation Previous: Implementation Next: Ideas Next: Ideas includeHTML(); "}}